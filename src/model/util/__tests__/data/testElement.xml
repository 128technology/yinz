<yin:list name="router" 
  xmlns:yin="urn:ietf:params:xml:ns:yang:yin:1" 
  xmlns:t128-codegen="http://128technology.com/t128-codegen-extensions" 
  xmlns:t128-internal="http://128technology.com/t128-internal-extensions" 
  xmlns:t128ext="http://128technology.com/t128-extensions" 
  xmlns:test="http://foo.bar" module-prefix="test">
  <yin:key value="name"/>
  <yin:unique tag="id"/>
  <yin:description>
    <yin:text>Router configuration.</yin:text>
  </yin:description>
  <t128-codegen:base-object/>
  <yin:leaf name="id">
    <yin:type name="t128ext:router-id">
      <yin:typedef name="router-id">
        <yin:description>
          <yin:text>A unique identifier for a router in a 128T authority</yin:text>
        </yin:description>
        <yin:type name="yang:uuid">
          <yin:typedef name="uuid">
            <yin:type name="string">
              <yin:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
            </yin:type>
            <yin:description>
              <yin:text>A Universally Unique IDentifier in the string representation
defined in RFC 4122.  The canonical representation uses
lowercase characters.

The following is an example of a UUID in string representation:
f81d4fae-7dec-11d0-a765-00a0c91e6bf6
              </yin:text>
            </yin:description>
            <yin:reference>
              <yin:text>RFC 4122: A Universally Unique IDentifier (UUID) URN
    Namespace</yin:text>
            </yin:reference>
          </yin:typedef>
        </yin:type>
      </yin:typedef>
    </yin:type>
    <t128-internal:visibility>hidden</t128-internal:visibility>
    <t128ext:help>router number</t128ext:help>
    <yin:description>
      <yin:text>Router number to uniquely identify a router
within an authority</yin:text>
    </yin:description>
  </yin:leaf>
  <yin:leaf name="name">
    <yin:type name="t128ext:name-id">
      <yin:typedef name="name-id">
        <yin:description>
          <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
        </yin:description>
        <yin:type name="string">
          <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
            <yin:error-message>
              <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
            </yin:error-message>
          </yin:pattern>
          <yin:length value="0..63"/>
        </yin:type>
      </yin:typedef>
    </yin:type>
    <yin:description>
      <yin:text>An identifier for the router.</yin:text>
    </yin:description>
  </yin:leaf>
  <yin:leaf name="location">
    <yin:type name="string"/>
    <yin:description>
      <yin:text>A descriptive location for this 128T router.</yin:text>
    </yin:description>
  </yin:leaf>
  <yin:leaf name="location-coordinates">
    <yin:type name="t128ext:geolocation">
      <yin:typedef name="geolocation">
        <yin:description>
          <yin:text>Geolocation in ISO 6709 format.</yin:text>
        </yin:description>
        <yin:type name="string">
          <yin:pattern value="[\+\-](\d\d)([0-5]\d)?([0-5]\d)?(\.\d*)?[\+\-](\d\d\d)([0-5]\d)?([0-5]\d)?(\.\d*)?/">
            <yin:error-message>
              <yin:value>Must be a geographic coordinate in ISO-6709 format. Example: +50.1-074.1/</yin:value>
            </yin:error-message>
          </yin:pattern>
        </yin:type>
      </yin:typedef>
    </yin:type>
    <yin:description>
      <yin:text>The geolocation of this router in ISO 6709 format. Some examples: (1) Degrees only: +50.20361-074.00417/ (2) Degrees and minutes: +5012.22-07400.25/ or (3) Degrees, minutes, and seconds: +501213.1-0740015.1/</yin:text>
    </yin:description>
    <t128ext:example>+501213.1-0740015.1/</t128ext:example>
  </yin:leaf>
  <yin:leaf name="description">
    <yin:type name="string"/>
    <yin:description>
      <yin:text>A human-readable string that allows administrators to
describe this configuration.</yin:text>
    </yin:description>
  </yin:leaf>
  <yin:leaf name="inter-node-security">
    <yin:type name="authy:security-ref">
      <yin:typedef name="security-ref">
        <yin:type name="leafref">
          <yin:path value="/t128:config/authy:authority/authy:security/authy:name"/>
          <yin:type name="t128ext:name-id">
            <yin:typedef name="name-id">
              <yin:description>
                <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
              </yin:description>
              <yin:type name="string">
                <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                  <yin:error-message>
                    <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                  </yin:error-message>
                </yin:pattern>
                <yin:length value="0..63"/>
              </yin:type>
            </yin:typedef>
          </yin:type>
        </yin:type>
        <yin:description>
          <yin:text>This type is used by other entities that need to reference
configured security policies.</yin:text>
        </yin:description>
      </yin:typedef>
      <yin:type name="t128ext:name-id">
        <yin:typedef name="name-id">
          <yin:description>
            <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
          </yin:description>
          <yin:type name="string">
            <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
              <yin:error-message>
                <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
              </yin:error-message>
            </yin:pattern>
            <yin:length value="0..63"/>
          </yin:type>
        </yin:typedef>
      </yin:type>
    </yin:type>
    <t128ext:help>security policy name</t128ext:help>
    <yin:mandatory value="true"/>
    <yin:description>
      <yin:text>The name of the security policy used for inter node communication
between router interfaces</yin:text>
    </yin:description>
  </yin:leaf>
  <yin:leaf name="reverse-flow-enforcement">
    <yin:type name="enumeration">
      <yin:enum name="none">
        <yin:description>
          <yin:text>Do not perform reverse fib entry lookup to set up reverse flow</yin:text>
        </yin:description>
      </yin:enum>
      <yin:enum name="strict">
        <yin:description>
          <yin:text>Perform strict uRPF check on reverse fib entry next hop to set up reverse flow</yin:text>
        </yin:description>
      </yin:enum>
    </yin:type>
    <yin:description>
      <yin:text>When to enforce biflow reverse fib entry check</yin:text>
    </yin:description>
    <yin:default value="none"/>
  </yin:leaf>
  <yin:leaf-list name="group">
    <yin:type name="t128ext:name-id">
      <yin:typedef name="name-id">
        <yin:description>
          <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
        </yin:description>
        <yin:type name="string">
          <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
            <yin:error-message>
              <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
            </yin:error-message>
          </yin:pattern>
          <yin:length value="0..63"/>
        </yin:type>
      </yin:typedef>
    </yin:type>
    <yin:description>
      <yin:text>An identifier that associates this router with an administrative group.</yin:text>
    </yin:description>
  </yin:leaf-list>
  <yin:container name="bfd">
    <yin:description>
      <yin:text>BFD parameters for sessions between nodes within the router.</yin:text>
    </yin:description>
    <t128-codegen:do-not-nest/>
    <yin:leaf name="state">
      <yin:type name="enumeration">
        <yin:enum name="enabled">
          <yin:description>
            <yin:text>BFD is enabled on all SLICEs on this router.</yin:text>
          </yin:description>
        </yin:enum>
        <yin:enum name="disabled">
          <yin:description>
            <yin:text>BFD is disabled on all SLICEs on this router.</yin:text>
          </yin:description>
        </yin:enum>
      </yin:type>
      <yin:description>
        <yin:text>Run BFD on all SLICEs on the router.</yin:text>
      </yin:description>
      <yin:default value="enabled"/>
    </yin:leaf>
    <yin:leaf name="desired-tx-interval">
      <yin:type name="uint32">
        <yin:range value="50..600000"/>
      </yin:type>
      <yin:units name="milliseconds"/>
      <yin:default value="1000"/>
      <yin:description>
        <yin:text>Represents the frequency with which BFD asynchronous
control packets are sent to peer nodes/routers.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="required-min-rx-interval">
      <yin:type name="uint32"/>
      <yin:units name="milliseconds"/>
      <yin:default value="500"/>
      <yin:description>
        <yin:text>Represents the minimum interval between BFD asynchronous
control packets that this router is capable of supporting.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="required-min-echo-interval">
      <yin:type name="uint32"/>
      <yin:units name="milliseconds"/>
      <yin:default value="1000"/>
      <yin:description>
        <yin:text>Represents the minimum interval between BFD echo
packets that this router is capable of supporting.</yin:text>
      </yin:description>
      <yin:must condition=". &gt;= ../required-min-rx-interval">
        <yin:error-message>
          <yin:value>Minimum echo interval must be greater than minimum receive interval.</yin:value>
        </yin:error-message>
      </yin:must>
    </yin:leaf>
    <yin:leaf name="authentication-type">
      <yin:description>
        <yin:text>Decribes the authentication type used in BFD packets</yin:text>
      </yin:description>
      <yin:mandatory value="false"/>
      <yin:type name="enumeration">
        <yin:enum name="simple">
          <yin:description>
            <yin:text>Simple Password.</yin:text>
          </yin:description>
        </yin:enum>
        <yin:enum name="sha256">
          <yin:description>
            <yin:text>SHA256</yin:text>
          </yin:description>
        </yin:enum>
      </yin:type>
      <yin:default value="sha256"/>
    </yin:leaf>
    <yin:leaf name="multiplier">
      <yin:type name="uint8">
        <yin:range value="3..20"/>
      </yin:type>
      <yin:default value="3"/>
      <yin:description>
        <yin:text>Number of consecutive missed messages from a peer before
deciding that the link between them is unusable.
Valid range is (3,20).</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="link-test-interval">
      <yin:type name="uint32">
        <yin:range value="1..86400"/>
      </yin:type>
      <yin:units name="seconds"/>
      <yin:default value="10"/>
      <yin:description>
        <yin:text>This represents the interval between BFD echo tests sent to
the peer node/router.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="link-test-length">
      <yin:type name="uint8"/>
      <yin:units name="packets"/>
      <yin:default value="20"/>
      <yin:description>
        <yin:text>This is the number of packets sent during one test cycle.
A value of 0 disables BFD echo tests.</yin:text>
      </yin:description>
    </yin:leaf>
  </yin:container>
  <yin:list name="peer">
    <yin:key value="name"/>
    <yin:unique tag="authority-name router-name"/>
    <yin:unique tag="id"/>
    <yin:description>
      <yin:text>Defines the properties associated with peer 128T routers.
The peer may be another router in the same authority or a
router in a different authority</yin:text>
    </yin:description>
    <t128-codegen:base-object/>
    <t128-codegen:member-constructor/>
    <t128-codegen:setters/>
    <yin:leaf name="name">
      <yin:type name="t128ext:peer-name">
        <yin:typedef name="peer-name">
          <yin:description>
            <yin:text>A string identifier for a peer, which uses alphanumerics, underscores,
dots, or dashes, and cannot exceed 253 characters.</yin:text>
          </yin:description>
          <yin:type name="string">
            <yin:pattern value="((([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9])?">
              <yin:error-message>
                <yin:value>Must contain only alphanumeric characters or any of the following: - _ .
(e.g., MyFirst-128T-Router).</yin:value>
              </yin:error-message>
            </yin:pattern>
            <yin:length value="0..253"/>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <t128ext:help>key identifier</t128ext:help>
      <yin:description>
        <yin:text>An arbitrary name that represents the properties associated
with the peer router. Typically this will be the name of the
authority or the value of the name field in the peer's
router configuration.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="id">
      <yin:type name="t128ext:peer-id">
        <yin:typedef name="peer-id">
          <yin:description>
            <yin:text>An index of a unique 128T peer</yin:text>
          </yin:description>
          <yin:type name="uint32">
            <yin:range value="1..4294967295"/>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <t128ext:help>peer id</t128ext:help>
      <yin:description>
        <yin:text>Peer id to uniquely identify a 128T peer</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="description">
      <yin:type name="string"/>
      <yin:description>
        <yin:text>A description of the peer router.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="authority-name">
      <yin:type name="t128ext:name-id">
        <yin:typedef name="name-id">
          <yin:description>
            <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
          </yin:description>
          <yin:type name="string">
            <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
              <yin:error-message>
                <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
              </yin:error-message>
            </yin:pattern>
            <yin:length value="0..63"/>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <yin:mandatory value="true"/>
      <yin:description>
        <yin:text>Name of the authority of the peer router.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="router-name">
      <yin:type name="t128ext:name-id">
        <yin:typedef name="name-id">
          <yin:description>
            <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
          </yin:description>
          <yin:type name="string">
            <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
              <yin:error-message>
                <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
              </yin:error-message>
            </yin:pattern>
            <yin:length value="0..63"/>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <yin:mandatory value="true"/>
      <yin:description>
        <yin:text>Name of the peer router.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="tenant">
      <yin:status value="obsolete"/>
      <yin:type name="string"/>
      <yin:description>
        <yin:text>Tenant assigned to this peer.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="inter-router-security">
      <yin:type name="authy:security-ref">
        <yin:typedef name="security-ref">
          <yin:type name="leafref">
            <yin:path value="/t128:config/authy:authority/authy:security/authy:name"/>
            <yin:type name="t128ext:name-id">
              <yin:typedef name="name-id">
                <yin:description>
                  <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
                </yin:description>
                <yin:type name="string">
                  <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                    <yin:error-message>
                      <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                    </yin:error-message>
                  </yin:pattern>
                  <yin:length value="0..63"/>
                </yin:type>
              </yin:typedef>
            </yin:type>
          </yin:type>
          <yin:description>
            <yin:text>This type is used by other entities that need to reference
configured security policies.</yin:text>
          </yin:description>
        </yin:typedef>
        <yin:type name="t128ext:name-id">
          <yin:typedef name="name-id">
            <yin:description>
              <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
            </yin:description>
            <yin:type name="string">
              <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                <yin:error-message>
                  <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                </yin:error-message>
              </yin:pattern>
              <yin:length value="0..63"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
      </yin:type>
      <t128ext:help>security policy name</t128ext:help>
      <yin:description>
        <yin:text>The name of the security policy used for inter router communication.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf-list name="control-address">
      <yin:status value="obsolete"/>
      <yin:type name="inet:ip-address">
        <yin:typedef name="ip-address">
          <yin:type name="union">
            <yin:type name="inet:ipv4-address">
              <yin:typedef name="ipv4-address">
                <yin:type name="string">
                  <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                </yin:type>
                <yin:description>
                  <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                </yin:description>
              </yin:typedef>
            </yin:type>
            <yin:type name="inet:ipv6-address">
              <yin:typedef name="ipv6-address">
                <yin:type name="string">
                  <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                  <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                </yin:type>
                <yin:description>
                  <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                </yin:description>
                <yin:reference>
                  <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                </yin:reference>
              </yin:typedef>
            </yin:type>
          </yin:type>
          <yin:description>
            <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
          </yin:description>
          <yin:reference>
            <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
          </yin:reference>
        </yin:typedef>
      </yin:type>
      <yin:description>
        <yin:text>The IP address(es) to reach the peer control node.</yin:text>
      </yin:description>
    </yin:leaf-list>
    <yin:leaf-list name="service-filter">
      <yin:status value="obsolete"/>
      <yin:type name="t128ext:qsn">
        <yin:typedef name="qsn">
          <yin:description>
            <yin:text>Qualified Service Name in the form: tenant[.authority][/[service-group/]service]</yin:text>
          </yin:description>
          <yin:type name="string">
            <yin:pattern value="((([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)(/([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]/?)*">
              <yin:error-message>
                <yin:value>Must contain only alphanumeric characters or any of the following: / . _ -
Required format: 'Tenant[.Authority[/ServiceGroup[/Service]]]'. No forward slash-delimited segment can exceed 62 characters.(e.g., Engineering.Authority128/Video/private_conferencing).</yin:value>
              </yin:error-message>
            </yin:pattern>
            <yin:length value="1..1024"/>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <yin:description>
        <yin:text>Qualified service names to include from peer router.</yin:text>
      </yin:description>
    </yin:leaf-list>
    <yin:container name="bfd">
      <yin:description>
        <yin:text>BFD parameters for the peer router.</yin:text>
      </yin:description>
      <t128-codegen:do-not-nest/>
      <yin:leaf name="state">
        <yin:type name="enumeration">
          <yin:enum name="enabled">
            <yin:description>
              <yin:text>BFD is enabled on all SLICEs on this router.</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="disabled">
            <yin:description>
              <yin:text>BFD is disabled on all SLICEs on this router.</yin:text>
            </yin:description>
          </yin:enum>
        </yin:type>
        <yin:description>
          <yin:text>Run BFD on all SLICEs on the router.</yin:text>
        </yin:description>
        <yin:default value="enabled"/>
      </yin:leaf>
      <yin:leaf name="desired-tx-interval">
        <yin:type name="uint32">
          <yin:range value="50..600000"/>
        </yin:type>
        <yin:units name="milliseconds"/>
        <yin:default value="1000"/>
        <yin:description>
          <yin:text>Represents the frequency with which BFD asynchronous
control packets are sent to peer nodes/routers.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="required-min-rx-interval">
        <yin:type name="uint32"/>
        <yin:units name="milliseconds"/>
        <yin:default value="500"/>
        <yin:description>
          <yin:text>Represents the minimum interval between BFD asynchronous
control packets that this router is capable of supporting.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="required-min-echo-interval">
        <yin:type name="uint32"/>
        <yin:units name="milliseconds"/>
        <yin:default value="1000"/>
        <yin:description>
          <yin:text>Represents the minimum interval between BFD echo
packets that this router is capable of supporting.</yin:text>
        </yin:description>
        <yin:must condition=". &gt;= ../required-min-rx-interval">
          <yin:error-message>
            <yin:value>Minimum echo interval must be greater than minimum receive interval.</yin:value>
          </yin:error-message>
        </yin:must>
      </yin:leaf>
      <yin:leaf name="authentication-type">
        <yin:description>
          <yin:text>Decribes the authentication type used in BFD packets</yin:text>
        </yin:description>
        <yin:mandatory value="false"/>
        <yin:type name="enumeration">
          <yin:enum name="simple">
            <yin:description>
              <yin:text>Simple Password.</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="sha256">
            <yin:description>
              <yin:text>SHA256</yin:text>
            </yin:description>
          </yin:enum>
        </yin:type>
        <yin:default value="sha256"/>
      </yin:leaf>
      <yin:leaf name="multiplier">
        <yin:type name="uint8">
          <yin:range value="3..20"/>
        </yin:type>
        <yin:default value="3"/>
        <yin:description>
          <yin:text>Number of consecutive missed messages from a peer before
deciding that the link between them is unusable.
Valid range is (3,20).</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="link-test-interval">
        <yin:type name="uint32">
          <yin:range value="1..86400"/>
        </yin:type>
        <yin:units name="seconds"/>
        <yin:default value="10"/>
        <yin:description>
          <yin:text>This represents the interval between BFD echo tests sent to
the peer node/router.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="link-test-length">
        <yin:type name="uint8"/>
        <yin:units name="packets"/>
        <yin:default value="20"/>
        <yin:description>
          <yin:text>This is the number of packets sent during one test cycle.
A value of 0 disables BFD echo tests.</yin:text>
        </yin:description>
      </yin:leaf>
    </yin:container>
    <yin:list xmlns:pps="http://128technology.com/t128/state/peer-path-state" name="path-state" module-prefix="pps">
      <yin:config value="false"/>
      <yin:description>
        <yin:text>The state of each 128T peer path.</yin:text>
      </yin:description>
      <yin:key value="destination-ip node device-interface vlan"/>
      <yin:leaf name="destination-ip">
        <yin:type name="inet:ip-address">
          <yin:typedef name="ip-address">
            <yin:type name="union">
              <yin:type name="inet:ipv4-address">
                <yin:typedef name="ipv4-address">
                  <yin:type name="string">
                    <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                  </yin:type>
                  <yin:description>
                    <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                  </yin:description>
                </yin:typedef>
              </yin:type>
              <yin:type name="inet:ipv6-address">
                <yin:typedef name="ipv6-address">
                  <yin:type name="string">
                    <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                    <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                  </yin:type>
                  <yin:description>
                    <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                  </yin:description>
                  <yin:reference>
                    <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                  </yin:reference>
                </yin:typedef>
              </yin:type>
            </yin:type>
            <yin:description>
              <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
            </yin:description>
            <yin:reference>
              <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
            </yin:reference>
          </yin:typedef>
        </yin:type>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>The destination IP address for the 128T peer.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="node">
        <yin:type name="t128ext:name-id">
          <yin:typedef name="name-id">
            <yin:description>
              <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
            </yin:description>
            <yin:type name="string">
              <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                <yin:error-message>
                  <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                </yin:error-message>
              </yin:pattern>
              <yin:length value="0..63"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>The node name string identifier.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="device-interface">
        <yin:type name="t128ext:device-port">
          <yin:typedef name="device-port">
            <yin:description>
              <yin:text>A physical or virtual port number of a network interface</yin:text>
            </yin:description>
            <yin:type name="uint16"/>
          </yin:typedef>
        </yin:type>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>A device interface on a node.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="vlan">
        <yin:type name="t128ext:vlan">
          <yin:typedef name="vlan">
            <yin:description>
              <yin:text>A VLAN identifier (0 for no VLAN, otherwise 1-4094).</yin:text>
            </yin:description>
            <yin:type name="uint16">
              <yin:range value="0..4094"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>The vlan ID.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="status">
        <yin:type name="pps:peer-path-status">
          <yin:typedef name="peer-path-status">
            <yin:description>
              <yin:text>The status of a path to a 128T peer.</yin:text>
            </yin:description>
            <yin:type name="enumeration">
              <yin:enum name="down">
                <yin:description>
                  <yin:text>Path is down.</yin:text>
                </yin:description>
              </yin:enum>
              <yin:enum name="init">
                <yin:description>
                  <yin:text>Path is initializing.</yin:text>
                </yin:description>
              </yin:enum>
              <yin:enum name="up">
                <yin:description>
                  <yin:text>Path is up.</yin:text>
                </yin:description>
              </yin:enum>
            </yin:type>
          </yin:typedef>
        </yin:type>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>The status of the 128T peer path.</yin:text>
        </yin:description>
      </yin:leaf>
    </yin:list>
  </yin:list>
  <yin:container name="entitlement">
    <yin:description>
      <yin:text>Entitlement configuration.</yin:text>
    </yin:description>
    <yin:leaf name="id">
      <yin:type name="string"/>
      <yin:description>
        <yin:text>Entitlement identifier.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="description">
      <yin:type name="string"/>
      <yin:description>
        <yin:text>A description of the entitlement.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="max-bandwidth">
      <yin:type name="uint64"/>
      <yin:units name="bits/second"/>
      <yin:default value="0"/>
      <yin:description>
        <yin:text>Purchased bandwidth.</yin:text>
      </yin:description>
    </yin:leaf>
  </yin:container>
  <yin:list xmlns:rt="http://128technology.com/t128/config/routing-config" name="routing" module-prefix="rt">
    <yin:key value="type"/>
    <yin:description>
      <yin:text>Configuration of a routing instance.</yin:text>
    </yin:description>
    <t128-codegen:base-object/>
    <yin:max-elements value="1"/>
    <yin:leaf name="type">
      <yin:type name="identityref">
        <yin:base name="routing-instance-type"/>
      </yin:type>
      <yin:description>
        <yin:text>The type of the routing instance.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="description">
      <yin:type name="string"/>
      <yin:description>
        <yin:text>Textual description of the routing instance.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:list name="routing-protocol">
      <yin:key value="type"/>
      <yin:description>
        <yin:text>Each entry contains configuration of a routing protocol
instance.</yin:text>
      </yin:description>
      <yin:leaf name="description">
        <yin:type name="string"/>
        <yin:description>
          <yin:text>Textual description of the routing protocol instance.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="type">
        <yin:type name="identityref">
          <yin:base name="routing-protocol"/>
        </yin:type>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>Type of the routing protocol - an identity derived
from the 'routing-protocol' base identity.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf xmlns:bgp="http://128technology.com/t128/config/bgp-config" 
        xmlns:rp="http://128technology.com/t128/config/routing-policy-config" name="local-as" module-prefix="bgp">
        <yin:type name="inet:as-number">
          <yin:typedef name="as-number">
            <yin:type name="uint32"/>
            <yin:description>
              <yin:text>The as-number type represents autonomous system numbers
which identify an Autonomous System (AS).  An AS is a set
of routers under a single technical administration, using
an interior gateway protocol and common metrics to route
packets within the AS, and using an exterior gateway
protocol to route packets to other ASes.  IANA maintains
the AS number space and has delegated large parts to the
regional registries.

Autonomous system numbers were originally limited to 16
bits.  BGP extensions have enlarged the autonomous system
number space to 32 bits.  This type therefore uses an uint32
base type without a range restriction in order to support
a larger autonomous system number space.

In the value set and its semantics, this type is equivalent
to the InetAutonomousSystemNumber textual convention of
the SMIv2.</yin:text>
            </yin:description>
            <yin:reference>
              <yin:text>RFC 1930: Guidelines for creation, selection, and registration
    of an Autonomous System (AS)
RFC 4271: A Border Gateway Protocol 4 (BGP-4)
RFC 4001: Textual Conventions for Internet Network Addresses
RFC 6793: BGP Support for Four-Octet Autonomous System (AS)
    Number Space</yin:text>
            </yin:reference>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>Local autonomous system number of the router.  Uses
the 32-bit as-number type from the model in RFC 6991.</yin:text>
        </yin:description>
        <yin:when condition="rt:type = 'rt:bgp'" context-node="parent"/>
      </yin:leaf>
      <yin:container xmlns:bgp="http://128technology.com/t128/config/bgp-config" 
        xmlns:rp="http://128technology.com/t128/config/routing-policy-config" name="timers" module-prefix="bgp">
        <yin:description>
          <yin:text>Config parameters related to timers associated with the BGP
neighbor</yin:text>
        </yin:description>
        <yin:when condition="rt:type = 'rt:bgp'" context-node="parent"/>
        <yin:leaf name="hold-time">
          <yin:type name="uint16"/>
          <yin:units name="seconds"/>
          <yin:default value="90"/>
          <yin:description>
            <yin:text>Time interval that a BGP session will be considered active
in the absence of keepalive or other messages from the
neighbor.  The hold-time is typically set to 3x the
keepalive-interval.</yin:text>
          </yin:description>
          <yin:reference>
            <yin:text>RFC 4271 - A Border Gateway Protocol 4, Sec. 10</yin:text>
          </yin:reference>
        </yin:leaf>
        <yin:leaf name="keepalive-interval">
          <yin:type name="uint16"/>
          <yin:units name="seconds"/>
          <yin:default value="30"/>
          <yin:description>
            <yin:text>Time interval between transmission of keepalive messages to
the neighbor.  Typically set to 1/3 the hold-time.</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:container>
      <yin:leaf xmlns:bgp="http://128technology.com/t128/config/bgp-config" 
        xmlns:rp="http://128technology.com/t128/config/routing-policy-config" name="router-id" module-prefix="bgp">
        <yin:type name="inet:ipv4-address">
          <yin:typedef name="ipv4-address">
            <yin:type name="string">
              <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
            </yin:type>
            <yin:description>
              <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
            </yin:description>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>Router id of the router, expressed as an
32-bit value, IPv4 address.</yin:text>
        </yin:description>
        <yin:when condition="rt:type = 'rt:bgp'" context-node="parent"/>
      </yin:leaf>
      <yin:container xmlns:bgp="http://128technology.com/t128/config/bgp-config" 
        xmlns:rp="http://128technology.com/t128/config/routing-policy-config" name="confederation" module-prefix="bgp">
        <yin:description>
          <yin:text>Configuration options specifying parameters when the local
router is within an autonomous system which is part of a BGP
confederation.</yin:text>
        </yin:description>
        <yin:when condition="rt:type = 'rt:bgp'" context-node="parent"/>
        <yin:leaf name="identifier">
          <yin:type name="inet:as-number">
            <yin:typedef name="as-number">
              <yin:type name="uint32"/>
              <yin:description>
                <yin:text>The as-number type represents autonomous system numbers
which identify an Autonomous System (AS).  An AS is a set
of routers under a single technical administration, using
an interior gateway protocol and common metrics to route
packets within the AS, and using an exterior gateway
protocol to route packets to other ASes.  IANA maintains
the AS number space and has delegated large parts to the
regional registries.

Autonomous system numbers were originally limited to 16
bits.  BGP extensions have enlarged the autonomous system
number space to 32 bits.  This type therefore uses an uint32
base type without a range restriction in order to support
a larger autonomous system number space.

In the value set and its semantics, this type is equivalent
to the InetAutonomousSystemNumber textual convention of
the SMIv2.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 1930: Guidelines for creation, selection, and registration
    of an Autonomous System (AS)
RFC 4271: A Border Gateway Protocol 4 (BGP-4)
RFC 4001: Textual Conventions for Internet Network Addresses
RFC 6793: BGP Support for Four-Octet Autonomous System (AS)
    Number Space</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>Confederation identifier for the autonomous system.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf-list name="member-as">
          <yin:type name="inet:as-number">
            <yin:typedef name="as-number">
              <yin:type name="uint32"/>
              <yin:description>
                <yin:text>The as-number type represents autonomous system numbers
which identify an Autonomous System (AS).  An AS is a set
of routers under a single technical administration, using
an interior gateway protocol and common metrics to route
packets within the AS, and using an exterior gateway
protocol to route packets to other ASes.  IANA maintains
the AS number space and has delegated large parts to the
regional registries.

Autonomous system numbers were originally limited to 16
bits.  BGP extensions have enlarged the autonomous system
number space to 32 bits.  This type therefore uses an uint32
base type without a range restriction in order to support
a larger autonomous system number space.

In the value set and its semantics, this type is equivalent
to the InetAutonomousSystemNumber textual convention of
the SMIv2.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 1930: Guidelines for creation, selection, and registration
    of an Autonomous System (AS)
RFC 4271: A Border Gateway Protocol 4 (BGP-4)
RFC 4001: Textual Conventions for Internet Network Addresses
RFC 6793: BGP Support for Four-Octet Autonomous System (AS)
    Number Space</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>Remote autonomous systems that are to be treated
as part of the local confederation.</yin:text>
          </yin:description>
        </yin:leaf-list>
      </yin:container>
      <yin:container xmlns:bgp="http://128technology.com/t128/config/bgp-config" 
        xmlns:rp="http://128technology.com/t128/config/routing-policy-config" name="route-selection-options" module-prefix="bgp">
        <yin:description>
          <yin:text>Set of configuration options that govern best
path selection.</yin:text>
        </yin:description>
        <yin:when condition="rt:type = 'rt:bgp'" context-node="parent"/>
        <yin:leaf name="always-compare-med">
          <yin:type name="boolean"/>
          <yin:default value="false"/>
          <yin:description>
            <yin:text>Compare multi-exit discriminator (MED) value from
different ASes when selecting the best route.  The
default behavior is to only compare MEDs for paths
received from the same AS.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="ignore-as-path-length">
          <yin:type name="boolean"/>
          <yin:default value="false"/>
          <yin:description>
            <yin:text>Ignore the AS path length when selecting the best path.
The default is to use the AS path length and prefer paths
with shorter length.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="external-compare-router-id">
          <yin:type name="boolean"/>
          <yin:default value="true"/>
          <yin:description>
            <yin:text>When comparing similar routes received from external
BGP neighbors, use the router-id as a criterion to select
the active path.</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:container>
      <yin:list xmlns:bgp="http://128technology.com/t128/config/bgp-config" 
        xmlns:rp="http://128technology.com/t128/config/routing-policy-config" name="address-family" module-prefix="bgp">
        <yin:key value="afi-safi"/>
        <yin:description>
          <yin:text>Address family configuration</yin:text>
        </yin:description>
        <yin:when condition="rt:type = 'rt:bgp'" context-node="parent"/>
        <yin:leaf name="afi-safi">
          <yin:type name="identityref">
            <yin:base name="afi-safi-type"/>
          </yin:type>
          <yin:description>
            <yin:text>Address family type</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="send-default-route">
          <yin:type name="boolean"/>
          <yin:default value="false"/>
          <yin:description>
            <yin:text>If set to true, send the default-route to the neighbor(s) if it
exists in the local rib for this address-family</yin:text>
          </yin:description>
          <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
        </yin:leaf>
        <yin:container name="prefix-limit">
          <yin:description>
            <yin:text>Configure the maximum number of prefixes that will be
accepted from a neighbor for this address family</yin:text>
          </yin:description>
          <yin:presence value="Enable address family maximum prefix limit"/>
          <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
          <yin:leaf name="max-prefixes">
            <yin:type name="uint32"/>
            <yin:units name="prefixes"/>
            <yin:mandatory value="true"/>
            <yin:description>
              <yin:text>Maximum number of prefixes that will be accepted
from the neighbor for this address family</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="shutdown-threshold-pct">
            <yin:type name="t128ext:percentage">
              <yin:typedef name="percentage">
                <yin:type name="uint8">
                  <yin:range value="0..100"/>
                </yin:type>
                <yin:description>
                  <yin:text>Integer indicating a percentage value</yin:text>
                </yin:description>
              </yin:typedef>
            </yin:type>
            <yin:units name="percent"/>
            <yin:description>
              <yin:text>Threshold on number of prefixes that can be received
from a neighbor for this address family before generation
of warning messages or log entries.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="restart-timer">
            <yin:type name="uint16">
              <yin:range value="1..65535"/>
            </yin:type>
            <yin:units name="seconds"/>
            <yin:description>
              <yin:text>Time interval after which the BGP session is re-established
after being torn down due to exceeding the max-prefix limit
for this adddress family.</yin:text>
            </yin:description>
          </yin:leaf>
        </yin:container>
        <yin:container name="use-multiple-paths">
          <yin:description>
            <yin:text>Parameters related to the use of multiple paths for the
same NLRI</yin:text>
          </yin:description>
          <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
          <yin:container name="ebgp">
            <yin:description>
              <yin:text>Multipath parameters for eBGP</yin:text>
            </yin:description>
            <yin:leaf name="maximum-paths">
              <yin:type name="uint32"/>
              <yin:units name="paths"/>
              <yin:default value="1"/>
              <yin:description>
                <yin:text>Maximum number of parallel paths to consider when using
eBGP multipath for this address family. The default is
to use a single path.</yin:text>
              </yin:description>
            </yin:leaf>
          </yin:container>
          <yin:container name="ibgp">
            <yin:description>
              <yin:text>Multipath parameters for iBGP</yin:text>
            </yin:description>
            <yin:leaf name="maximum-paths">
              <yin:type name="uint32"/>
              <yin:units name="paths"/>
              <yin:default value="1"/>
              <yin:description>
                <yin:text>Maximum number of parallel paths to consider when using
iBGP multipath for this address family. The default is
to use a single path</yin:text>
              </yin:description>
            </yin:leaf>
          </yin:container>
        </yin:container>
        <yin:container name="default-route-distance">
          <yin:description>
            <yin:text>Configuration options relating to the administrative distance
(or preference) assigned to routes received from different
sources (external, internal, and local).</yin:text>
          </yin:description>
          <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
          <yin:leaf name="external">
            <yin:type name="uint8">
              <yin:range value="1..255"/>
            </yin:type>
            <yin:description>
              <yin:text>Administrative distance for routes learned from external
BGP (eBGP).</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="internal">
            <yin:type name="uint8">
              <yin:range value="1..255"/>
            </yin:type>
            <yin:description>
              <yin:text>Administrative distance for routes learned from internal
BGP (iBGP).</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="local">
            <yin:type name="uint8">
              <yin:range value="1..255"/>
            </yin:type>
            <yin:description>
              <yin:text>Administrative distance for local routes</yin:text>
            </yin:description>
          </yin:leaf>
        </yin:container>
        <yin:container name="graceful-restart">
          <yin:description>
            <yin:text>Configuration parameters relating to BGP graceful restart.</yin:text>
          </yin:description>
          <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
          <yin:leaf name="restart-time">
            <yin:type name="uint16">
              <yin:range value="0..4096"/>
            </yin:type>
            <yin:units name="seconds"/>
            <yin:description>
              <yin:text>Estimated time for the local BGP speaker to restart a
session. This value is advertise in the graceful restart BGP
capability.  This is a 12-bit value, referred to as Restart
Time in RFC4724.  Per RFC4724, the suggested default value
is &lt;= the hold-time value.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="stale-routes-time">
            <yin:type name="uint16">
              <yin:range value="1..3600"/>
            </yin:type>
            <yin:units name="seconds"/>
            <yin:description>
              <yin:text>An upper-bound on the time that the stale routes will be
retained by a router after a session is restarted. If an
End-of-RIB (EOR) marker is received prior to this timer
expiring stale-routes will be flushed upon its receipt - if
no EOR is received, then when this timer expires stale paths
will be purged. This timer is referred to as the
Selection_Deferral_Timer in RFC4724</yin:text>
            </yin:description>
          </yin:leaf>
        </yin:container>
        <yin:list name="aggregate-address">
          <yin:key value="prefix"/>
          <yin:description>
            <yin:text>Address prefixes to aggregate</yin:text>
          </yin:description>
          <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
          <yin:leaf name="prefix">
            <yin:description>
              <yin:text>The prefix to aggregate from</yin:text>
            </yin:description>
            <yin:type name="inet:ip-prefix">
              <yin:typedef name="ip-prefix">
                <yin:type name="union">
                  <yin:type name="inet:ipv4-prefix">
                    <yin:typedef name="ipv4-prefix">
                      <yin:type name="string">
                        <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv4-prefix type represents an IPv4 address prefix.
The prefix length is given by the number following the
slash character and must be less than or equal to 32.

A prefix length value of n corresponds to an IP address
mask that has n contiguous 1-bits from the most
significant bit (MSB) and all other bits set to 0.

The canonical format of an IPv4 prefix has all bits of
the IPv4 address set to zero that are not part of the
IPv4 prefix.</yin:text>
                      </yin:description>
                    </yin:typedef>
                  </yin:type>
                  <yin:type name="inet:ipv6-prefix">
                    <yin:typedef name="ipv6-prefix">
                      <yin:type name="string">
                        <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))"/>
                        <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv6-prefix type represents an IPv6 address prefix.
The prefix length is given by the number following the
slash character and must be less than or equal to 128.

A prefix length value of n corresponds to an IP address
mask that has n contiguous 1-bits from the most
significant bit (MSB) and all other bits set to 0.

The IPv6 address should have all bits that do not belong
to the prefix set to zero.

The canonical format of an IPv6 prefix has all bits of
the IPv6 address set to zero that are not part of the
IPv6 prefix.  Furthermore, the IPv6 address is represented
as defined in Section 4 of RFC 5952.</yin:text>
                      </yin:description>
                      <yin:reference>
                        <yin:text>RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                      </yin:reference>
                    </yin:typedef>
                  </yin:type>
                </yin:type>
                <yin:description>
                  <yin:text>The ip-prefix type represents an IP prefix and is IP
version neutral.  The format of the textual representations
implies the IP version.</yin:text>
                </yin:description>
              </yin:typedef>
            </yin:type>
          </yin:leaf>
          <yin:leaf name="as-set">
            <yin:type name="boolean"/>
            <yin:default value="false"/>
            <yin:description>
              <yin:text>Generate as-set information for the resultant aggregate</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="summary-only">
            <yin:type name="boolean"/>
            <yin:default value="false"/>
            <yin:description>
              <yin:text>Specifies that the prefixes aggregated by this aggregation
are not to be advertised: only the aggregate itself will
be advertised</yin:text>
            </yin:description>
          </yin:leaf>
        </yin:list>
        <yin:list name="network">
          <yin:key value="network-address"/>
          <yin:description>
            <yin:text>Advertises a network into BGP</yin:text>
          </yin:description>
          <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
          <yin:leaf name="network-address">
            <yin:description>
              <yin:text>Specify a network to announce via BGP for this address
family</yin:text>
            </yin:description>
            <yin:type name="inet:ip-prefix">
              <yin:typedef name="ip-prefix">
                <yin:type name="union">
                  <yin:type name="inet:ipv4-prefix">
                    <yin:typedef name="ipv4-prefix">
                      <yin:type name="string">
                        <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv4-prefix type represents an IPv4 address prefix.
The prefix length is given by the number following the
slash character and must be less than or equal to 32.

A prefix length value of n corresponds to an IP address
mask that has n contiguous 1-bits from the most
significant bit (MSB) and all other bits set to 0.

The canonical format of an IPv4 prefix has all bits of
the IPv4 address set to zero that are not part of the
IPv4 prefix.</yin:text>
                      </yin:description>
                    </yin:typedef>
                  </yin:type>
                  <yin:type name="inet:ipv6-prefix">
                    <yin:typedef name="ipv6-prefix">
                      <yin:type name="string">
                        <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))"/>
                        <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv6-prefix type represents an IPv6 address prefix.
The prefix length is given by the number following the
slash character and must be less than or equal to 128.

A prefix length value of n corresponds to an IP address
mask that has n contiguous 1-bits from the most
significant bit (MSB) and all other bits set to 0.

The IPv6 address should have all bits that do not belong
to the prefix set to zero.

The canonical format of an IPv6 prefix has all bits of
the IPv6 address set to zero that are not part of the
IPv6 prefix.  Furthermore, the IPv6 address is represented
as defined in Section 4 of RFC 5952.</yin:text>
                      </yin:description>
                      <yin:reference>
                        <yin:text>RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                      </yin:reference>
                    </yin:typedef>
                  </yin:type>
                </yin:type>
                <yin:description>
                  <yin:text>The ip-prefix type represents an IP prefix and is IP
version neutral.  The format of the textual representations
implies the IP version.</yin:text>
                </yin:description>
              </yin:typedef>
            </yin:type>
          </yin:leaf>
          <yin:leaf name="policy">
            <yin:description>
              <yin:text>a policy to apply to the imported route</yin:text>
            </yin:description>
            <yin:type name="rp:policy-ref">
              <yin:typedef name="policy-ref">
                <yin:type name="leafref">
                  <yin:path value="/t128:config/authy:authority/rp:routing/rp:policy/rp:name"/>
                  <yin:type name="t128ext:name-id">
                    <yin:typedef name="name-id">
                      <yin:description>
                        <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
                      </yin:description>
                      <yin:type name="string">
                        <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                          <yin:error-message>
                            <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                          </yin:error-message>
                        </yin:pattern>
                        <yin:length value="0..63"/>
                      </yin:type>
                    </yin:typedef>
                  </yin:type>
                </yin:type>
              </yin:typedef>
            </yin:type>
            <t128-internal:visibility>hidden</t128-internal:visibility>
          </yin:leaf>
        </yin:list>
      </yin:list>
      <yin:list xmlns:bgp="http://128technology.com/t128/config/bgp-config" 
        xmlns:rp="http://128technology.com/t128/config/routing-policy-config" name="neighbor" module-prefix="bgp">
        <yin:key value="neighbor-address"/>
        <yin:description>
          <yin:text>List of BGP neighbors configured on the local system,
uniquely identified by neighbor IPv[46] address</yin:text>
        </yin:description>
        <yin:when condition="rt:type = 'rt:bgp'" context-node="parent"/>
        <yin:leaf name="neighbor-address">
          <yin:type name="inet:ip-address">
            <yin:typedef name="ip-address">
              <yin:type name="union">
                <yin:type name="inet:ipv4-address">
                  <yin:typedef name="ipv4-address">
                    <yin:type name="string">
                      <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                    </yin:type>
                    <yin:description>
                      <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                    </yin:description>
                  </yin:typedef>
                </yin:type>
                <yin:type name="inet:ipv6-address">
                  <yin:typedef name="ipv6-address">
                    <yin:type name="string">
                      <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                      <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                    </yin:type>
                    <yin:description>
                      <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                    </yin:description>
                    <yin:reference>
                      <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                    </yin:reference>
                  </yin:typedef>
                </yin:type>
              </yin:type>
              <yin:description>
                <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>Address of the BGP neighbor, either in IPv4 or IPv6</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="neighbor-as">
          <yin:type name="inet:as-number">
            <yin:typedef name="as-number">
              <yin:type name="uint32"/>
              <yin:description>
                <yin:text>The as-number type represents autonomous system numbers
which identify an Autonomous System (AS).  An AS is a set
of routers under a single technical administration, using
an interior gateway protocol and common metrics to route
packets within the AS, and using an exterior gateway
protocol to route packets to other ASes.  IANA maintains
the AS number space and has delegated large parts to the
regional registries.

Autonomous system numbers were originally limited to 16
bits.  BGP extensions have enlarged the autonomous system
number space to 32 bits.  This type therefore uses an uint32
base type without a range restriction in order to support
a larger autonomous system number space.

In the value set and its semantics, this type is equivalent
to the InetAutonomousSystemNumber textual convention of
the SMIv2.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 1930: Guidelines for creation, selection, and registration
    of an Autonomous System (AS)
RFC 4271: A Border Gateway Protocol 4 (BGP-4)
RFC 4001: Textual Conventions for Internet Network Addresses
RFC 6793: BGP Support for Four-Octet Autonomous System (AS)
    Number Space</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>AS number of the neighbor.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="local-as">
          <yin:type name="inet:as-number">
            <yin:typedef name="as-number">
              <yin:type name="uint32"/>
              <yin:description>
                <yin:text>The as-number type represents autonomous system numbers
which identify an Autonomous System (AS).  An AS is a set
of routers under a single technical administration, using
an interior gateway protocol and common metrics to route
packets within the AS, and using an exterior gateway
protocol to route packets to other ASes.  IANA maintains
the AS number space and has delegated large parts to the
regional registries.

Autonomous system numbers were originally limited to 16
bits.  BGP extensions have enlarged the autonomous system
number space to 32 bits.  This type therefore uses an uint32
base type without a range restriction in order to support
a larger autonomous system number space.

In the value set and its semantics, this type is equivalent
to the InetAutonomousSystemNumber textual convention of
the SMIv2.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 1930: Guidelines for creation, selection, and registration
    of an Autonomous System (AS)
RFC 4271: A Border Gateway Protocol 4 (BGP-4)
RFC 4001: Textual Conventions for Internet Network Addresses
RFC 6793: BGP Support for Four-Octet Autonomous System (AS)
    Number Space</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The local autonomous system number that is to be used
when establishing sessions with the remote neighbor or neighbor
group, if this differs from the global BGP router
autonomous system number.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="shutdown">
          <yin:type name="boolean"/>
          <yin:default value="false"/>
          <yin:description>
            <yin:text>If set to true, the neighbors connection will not come
up.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="auth-password">
          <yin:type name="t128ext:password">
            <yin:typedef name="password">
              <yin:description>
                <yin:text>A password type that is hidden from the UI. The internal storage
format is dependent on the individual field.</yin:text>
              </yin:description>
              <yin:type name="string"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>Configures an MD5 authentication password for use with
neighboring devices.</yin:text>
          </yin:description>
          <t128-internal:secure/>
        </yin:leaf>
        <yin:leaf name="description">
          <yin:type name="string"/>
          <yin:description>
            <yin:text>An optional textual description (intended primarily for use
with a neighbor or group</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:container name="timers">
          <yin:description>
            <yin:text>Config parameters related to timers associated with the BGP
neighbor</yin:text>
          </yin:description>
          <yin:leaf name="hold-time">
            <yin:type name="uint16"/>
            <yin:units name="seconds"/>
            <yin:default value="90"/>
            <yin:description>
              <yin:text>Time interval that a BGP session will be considered active
in the absence of keepalive or other messages from the
neighbor.  The hold-time is typically set to 3x the
keepalive-interval.</yin:text>
            </yin:description>
            <yin:reference>
              <yin:text>RFC 4271 - A Border Gateway Protocol 4, Sec. 10</yin:text>
            </yin:reference>
          </yin:leaf>
          <yin:leaf name="keepalive-interval">
            <yin:type name="uint16"/>
            <yin:units name="seconds"/>
            <yin:default value="30"/>
            <yin:description>
              <yin:text>Time interval between transmission of keepalive messages to
the neighbor.  Typically set to 1/3 the hold-time.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="connect-retry">
            <yin:type name="uint16"/>
            <yin:units name="seconds"/>
            <yin:default value="30"/>
            <yin:description>
              <yin:text>Time interval between attempts to establish a session
with the neighbor.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="minimum-advertisement-interval">
            <yin:type name="uint16">
              <yin:range value="0..600"/>
            </yin:type>
            <yin:default value="30"/>
            <yin:units name="seconds"/>
            <yin:description>
              <yin:text>Minimum time which must elapse between subsequent UPDATE
messages relating to a common set of NLRI being transmitted
to a neighbor. This timer is referred to as
MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to
reduce the number of UPDATE messages transmitted when a
particular set of NLRI exhibit instability.</yin:text>
            </yin:description>
            <yin:reference>
              <yin:text>RFC 4271 - A Border Gateway Protocol 4, Sec 9.2.1.1</yin:text>
            </yin:reference>
          </yin:leaf>
        </yin:container>
        <yin:container name="transport">
          <yin:description>
            <yin:text>Configuration parameters relating to the transport protocol
used by the BGP session to the neighbor</yin:text>
          </yin:description>
          <yin:leaf name="passive-mode">
            <yin:type name="boolean"/>
            <yin:default value="false"/>
            <yin:description>
              <yin:text>Wait for neighbors to issue requests to open a BGP session,
rather than initiating sessions from the local router.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="local-address">
            <yin:type name="union">
              <yin:type name="inet:ip-address">
                <yin:typedef name="ip-address">
                  <yin:type name="union">
                    <yin:type name="inet:ipv4-address">
                      <yin:typedef name="ipv4-address">
                        <yin:type name="string">
                          <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                        </yin:type>
                        <yin:description>
                          <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                        </yin:description>
                      </yin:typedef>
                    </yin:type>
                    <yin:type name="inet:ipv6-address">
                      <yin:typedef name="ipv6-address">
                        <yin:type name="string">
                          <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                          <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                        </yin:type>
                        <yin:description>
                          <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                        </yin:description>
                        <yin:reference>
                          <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                        </yin:reference>
                      </yin:typedef>
                    </yin:type>
                  </yin:type>
                  <yin:description>
                    <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
                  </yin:description>
                  <yin:reference>
                    <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
                  </yin:reference>
                </yin:typedef>
              </yin:type>
              <yin:type name="string"/>
            </yin:type>
            <yin:description>
              <yin:text>Set the local IP (either IPv4 or IPv6) address to use
for the session when sending BGP update messages.  This
may be expressed as either an IP address or reference
to the name of an interface.</yin:text>
            </yin:description>
          </yin:leaf>
        </yin:container>
        <yin:container name="multihop">
          <yin:description>
            <yin:text>Configuration parameters specifying the multihop behaviour for
BGP sessions to the neighbor</yin:text>
          </yin:description>
          <yin:leaf name="ttl">
            <yin:type name="uint8"/>
            <yin:description>
              <yin:text>Time-to-live value to use when packets are sent to the
referenced group or neighbors and ebgp-multihop is enabled</yin:text>
            </yin:description>
          </yin:leaf>
        </yin:container>
        <yin:leaf name="inbound-policy">
          <yin:description>
            <yin:text>a policy to apply to the NLRIs inbound from this neighbor</yin:text>
          </yin:description>
          <yin:type name="rp:policy-ref">
            <yin:typedef name="policy-ref">
              <yin:type name="leafref">
                <yin:path value="/t128:config/authy:authority/rp:routing/rp:policy/rp:name"/>
                <yin:type name="t128ext:name-id">
                  <yin:typedef name="name-id">
                    <yin:description>
                      <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
                    </yin:description>
                    <yin:type name="string">
                      <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                        <yin:error-message>
                          <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                        </yin:error-message>
                      </yin:pattern>
                      <yin:length value="0..63"/>
                    </yin:type>
                  </yin:typedef>
                </yin:type>
              </yin:type>
            </yin:typedef>
          </yin:type>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="outbound-policy">
          <yin:description>
            <yin:text>a policy to apply to the NLRIs outbound to this neighbor</yin:text>
          </yin:description>
          <yin:type name="rp:policy-ref">
            <yin:typedef name="policy-ref">
              <yin:type name="leafref">
                <yin:path value="/t128:config/authy:authority/rp:routing/rp:policy/rp:name"/>
                <yin:type name="t128ext:name-id">
                  <yin:typedef name="name-id">
                    <yin:description>
                      <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
                    </yin:description>
                    <yin:type name="string">
                      <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                        <yin:error-message>
                          <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                        </yin:error-message>
                      </yin:pattern>
                      <yin:length value="0..63"/>
                    </yin:type>
                  </yin:typedef>
                </yin:type>
              </yin:type>
            </yin:typedef>
          </yin:type>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:list name="address-family">
          <yin:key value="afi-safi"/>
          <yin:description>
            <yin:text>Address family configuration</yin:text>
          </yin:description>
          <yin:leaf name="afi-safi">
            <yin:type name="identityref">
              <yin:base name="afi-safi-type"/>
            </yin:type>
            <yin:description>
              <yin:text>Address family type</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="send-default-route">
            <yin:type name="boolean"/>
            <yin:default value="false"/>
            <yin:description>
              <yin:text>If set to true, send the default-route to the neighbor(s) if it
exists in the local rib for this address-family</yin:text>
            </yin:description>
            <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
          </yin:leaf>
          <yin:container name="prefix-limit">
            <yin:description>
              <yin:text>Configure the maximum number of prefixes that will be
accepted from a neighbor for this address family</yin:text>
            </yin:description>
            <yin:presence value="Enable address family maximum prefix limit"/>
            <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
            <yin:leaf name="max-prefixes">
              <yin:type name="uint32"/>
              <yin:units name="prefixes"/>
              <yin:mandatory value="true"/>
              <yin:description>
                <yin:text>Maximum number of prefixes that will be accepted
from the neighbor for this address family</yin:text>
              </yin:description>
            </yin:leaf>
            <yin:leaf name="shutdown-threshold-pct">
              <yin:type name="t128ext:percentage">
                <yin:typedef name="percentage">
                  <yin:type name="uint8">
                    <yin:range value="0..100"/>
                  </yin:type>
                  <yin:description>
                    <yin:text>Integer indicating a percentage value</yin:text>
                  </yin:description>
                </yin:typedef>
              </yin:type>
              <yin:units name="percent"/>
              <yin:description>
                <yin:text>Threshold on number of prefixes that can be received
from a neighbor for this address family before generation
of warning messages or log entries.</yin:text>
              </yin:description>
            </yin:leaf>
            <yin:leaf name="restart-timer">
              <yin:type name="uint16">
                <yin:range value="1..65535"/>
              </yin:type>
              <yin:units name="seconds"/>
              <yin:description>
                <yin:text>Time interval after which the BGP session is re-established
after being torn down due to exceeding the max-prefix limit
for this adddress family.</yin:text>
              </yin:description>
            </yin:leaf>
          </yin:container>
          <yin:leaf name="next-hop-self">
            <yin:type name="boolean"/>
            <yin:default value="false"/>
            <yin:description>
              <yin:text>Sets the router as the next hop for this neighbor and this
address family</yin:text>
            </yin:description>
            <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
          </yin:leaf>
          <yin:container name="route-reflector">
            <yin:description>
              <yin:text>Configuration parameters determining whether the behaviour of
the local system when acting as a route-reflector</yin:text>
            </yin:description>
            <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
            <yin:leaf name="client">
              <yin:type name="boolean"/>
              <yin:default value="false"/>
              <yin:description>
                <yin:text>Configure the neighbor as a route reflector client for this
address family.</yin:text>
              </yin:description>
            </yin:leaf>
          </yin:container>
          <yin:container name="as-path-options">
            <yin:description>
              <yin:text>Configuration parameters allowing manipulation of the AS_PATH
attribute for this address family</yin:text>
            </yin:description>
            <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
            <yin:leaf name="allow-own-as">
              <yin:type name="uint8"/>
              <yin:description>
                <yin:text>Specify the number of occurrences of the local BGP speaker's
AS that can occur within the AS_PATH before it is rejected
for this address family.</yin:text>
              </yin:description>
            </yin:leaf>
          </yin:container>
          <yin:leaf name="remove-private-as">
            <yin:type name="remove-private-as-option">
              <yin:typedef name="remove-private-as-option">
                <yin:type name="enumeration">
                  <yin:enum name="all">
                    <yin:description>
                      <yin:text>remove all private ASes in the path</yin:text>
                    </yin:description>
                  </yin:enum>
                </yin:type>
                <yin:description>
                  <yin:text>set of options for configuring how private AS path numbers
are removed from advertisements</yin:text>
                </yin:description>
              </yin:typedef>
            </yin:type>
            <yin:description>
              <yin:text>Remove private AS numbers from updates sent to neighbors for
this address family.</yin:text>
            </yin:description>
            <yin:when condition="afi-safi = 'bgp:ipv4-unicast'" context-node="parent"/>
          </yin:leaf>
        </yin:list>
      </yin:list>
    </yin:list>
    <yin:list name="static-route">
      <yin:key value="destination-prefix distance"/>
      <yin:description>
        <yin:text>A list of static routes.</yin:text>
      </yin:description>
      <yin:must condition="(count(next-hop) &gt; 0 and not(blackhole)) or&#10;(count(next-hop) = 0 and blackhole)">
        <yin:error-message>
          <yin:value>Must configure either next-hops or blackhole for static-route</yin:value>
        </yin:error-message>
      </yin:must>
      <yin:leaf name="destination-prefix">
        <yin:type name="inet:ip-prefix">
          <yin:typedef name="ip-prefix">
            <yin:type name="union">
              <yin:type name="inet:ipv4-prefix">
                <yin:typedef name="ipv4-prefix">
                  <yin:type name="string">
                    <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"/>
                  </yin:type>
                  <yin:description>
                    <yin:text>The ipv4-prefix type represents an IPv4 address prefix.
The prefix length is given by the number following the
slash character and must be less than or equal to 32.

A prefix length value of n corresponds to an IP address
mask that has n contiguous 1-bits from the most
significant bit (MSB) and all other bits set to 0.

The canonical format of an IPv4 prefix has all bits of
the IPv4 address set to zero that are not part of the
IPv4 prefix.</yin:text>
                  </yin:description>
                </yin:typedef>
              </yin:type>
              <yin:type name="inet:ipv6-prefix">
                <yin:typedef name="ipv6-prefix">
                  <yin:type name="string">
                    <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))"/>
                    <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"/>
                  </yin:type>
                  <yin:description>
                    <yin:text>The ipv6-prefix type represents an IPv6 address prefix.
The prefix length is given by the number following the
slash character and must be less than or equal to 128.

A prefix length value of n corresponds to an IP address
mask that has n contiguous 1-bits from the most
significant bit (MSB) and all other bits set to 0.

The IPv6 address should have all bits that do not belong
to the prefix set to zero.

The canonical format of an IPv6 prefix has all bits of
the IPv6 address set to zero that are not part of the
IPv6 prefix.  Furthermore, the IPv6 address is represented
as defined in Section 4 of RFC 5952.</yin:text>
                  </yin:description>
                  <yin:reference>
                    <yin:text>RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                  </yin:reference>
                </yin:typedef>
              </yin:type>
            </yin:type>
            <yin:description>
              <yin:text>The ip-prefix type represents an IP prefix and is IP
version neutral.  The format of the textual representations
implies the IP version.</yin:text>
            </yin:description>
          </yin:typedef>
        </yin:type>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>IP destination prefix.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="distance">
        <yin:type name="uint8">
          <yin:range value="1..255"/>
        </yin:type>
        <yin:description>
          <yin:text>Static route administrative distance.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="description">
        <yin:type name="string"/>
        <yin:description>
          <yin:text>Textual description of the route.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf-list name="next-hop">
        <yin:type name="inet:ip-address">
          <yin:typedef name="ip-address">
            <yin:type name="union">
              <yin:type name="inet:ipv4-address">
                <yin:typedef name="ipv4-address">
                  <yin:type name="string">
                    <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                  </yin:type>
                  <yin:description>
                    <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                  </yin:description>
                </yin:typedef>
              </yin:type>
              <yin:type name="inet:ipv6-address">
                <yin:typedef name="ipv6-address">
                  <yin:type name="string">
                    <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                    <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                  </yin:type>
                  <yin:description>
                    <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                  </yin:description>
                  <yin:reference>
                    <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                  </yin:reference>
                </yin:typedef>
              </yin:type>
            </yin:type>
            <yin:description>
              <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
            </yin:description>
            <yin:reference>
              <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
            </yin:reference>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>List of next-hops.</yin:text>
        </yin:description>
      </yin:leaf-list>
      <yin:leaf name="blackhole">
        <yin:type name="empty"/>
        <yin:description>
          <yin:text>Blackhole static route.</yin:text>
        </yin:description>
      </yin:leaf>
    </yin:list>
  </yin:list>
  <yin:container xmlns:sys="http://128technology.com/t128/config/system-config" name="system" module-prefix="sys">
    <yin:description>
      <yin:text>System group configuration.</yin:text>
    </yin:description>
    <t128-codegen:base-object/>
    <yin:leaf name="contact">
      <yin:type name="string"/>
      <yin:description>
        <yin:text>The administrator contact information for the system.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="location">
      <yin:type name="string"/>
      <yin:status value="obsolete"/>
      <yin:description>
        <yin:text>The system location.</yin:text>
      </yin:description>
      <t128ext:example>Route 128 Data Center, Boston, Massachusetts.</t128ext:example>
    </yin:leaf>
    <yin:leaf name="log-level">
      <yin:type name="t128ext:log-level">
        <yin:typedef name="log-level">
          <yin:description>
            <yin:text>Log levels</yin:text>
          </yin:description>
          <yin:type name="enumeration">
            <yin:enum name="fatal">
              <yin:description>
                <yin:text>Only record log messages with level "fatal" or higher</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="error">
              <yin:description>
                <yin:text>Only record log messages with level "error" or higher</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="warning">
              <yin:description>
                <yin:text>Only record log messages with level "warning" or higher</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="info">
              <yin:description>
                <yin:text>Only record log messages with level "info" or higher</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="debug">
              <yin:description>
                <yin:text>Only record log messages with level "debug" or higher</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="trace">
              <yin:description>
                <yin:text>Only record log messages with level "trace" or higher</yin:text>
              </yin:description>
            </yin:enum>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <yin:default value="info"/>
      <yin:description>
        <yin:text>The log level.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="inactivity-timer">
      <yin:description>
        <yin:text>The amount of time a user is allowed to be idle before
being automatically disconnected from the system.</yin:text>
      </yin:description>
      <yin:type name="uint32">
        <yin:range value="300..86400"/>
      </yin:type>
      <yin:units name="seconds"/>
      <yin:default value="900"/>
      <t128-internal:visibility>advanced</t128-internal:visibility>
    </yin:leaf>
    <yin:container name="syslog">
      <yin:description>
        <yin:text>Syslog configuration.</yin:text>
      </yin:description>
      <yin:leaf name="severity">
        <yin:type name="enumeration">
          <yin:enum name="emergency">
            <yin:description>
              <yin:text>Only record log messages with level "emergency" or higher</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="alert">
            <yin:description>
              <yin:text>Only record log messages with level "alert" or higher</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="critical">
            <yin:description>
              <yin:text>Only record log messages with level "critical" or higher</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="error">
            <yin:description>
              <yin:text>Only record log messages with level "error" or higher</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="warning">
            <yin:description>
              <yin:text>Only record log messages with level "warning" or higher</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="notice">
            <yin:description>
              <yin:text>Only record log messages with level "notice" or higher</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="info">
            <yin:description>
              <yin:text>Only record log messages with level "info" or higher</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="debug">
            <yin:description>
              <yin:text>Only record log messages with level "debug" or higher</yin:text>
            </yin:description>
          </yin:enum>
        </yin:type>
        <yin:default value="info"/>
        <yin:description>
          <yin:text>The syslog severity level.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="facility">
        <yin:type name="enumeration">
          <yin:enum name="local0">
            <yin:description>
              <yin:text>syslog local use 0 facility reserved for local use</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="local1">
            <yin:description>
              <yin:text>syslog local use 1 facility reserved for local use</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="local2">
            <yin:description>
              <yin:text>syslog local use 2 facility reserved for local use</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="local3">
            <yin:description>
              <yin:text>syslog local use 3 facility reserved for local use</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="local4">
            <yin:description>
              <yin:text>syslog local use 4 facility reserved for local use</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="local5">
            <yin:description>
              <yin:text>syslog local use 5 facility reserved for local use</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="local6">
            <yin:description>
              <yin:text>syslog local use 6 facility reserved for local use</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="local7">
            <yin:description>
              <yin:text>syslog local use 7 facility reserved for local use</yin:text>
            </yin:description>
          </yin:enum>
        </yin:type>
        <yin:default value="local0"/>
        <yin:description>
          <yin:text>The facility under which syslog messages will be recorded.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:list name="server">
        <yin:key value="ip-address port"/>
        <yin:description>
          <yin:text>The list of syslog servers configured for this device.</yin:text>
        </yin:description>
        <yin:leaf name="ip-address">
          <yin:type name="inet:ip-address">
            <yin:typedef name="ip-address">
              <yin:type name="union">
                <yin:type name="inet:ipv4-address">
                  <yin:typedef name="ipv4-address">
                    <yin:type name="string">
                      <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                    </yin:type>
                    <yin:description>
                      <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                    </yin:description>
                  </yin:typedef>
                </yin:type>
                <yin:type name="inet:ipv6-address">
                  <yin:typedef name="ipv6-address">
                    <yin:type name="string">
                      <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                      <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                    </yin:type>
                    <yin:description>
                      <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                    </yin:description>
                    <yin:reference>
                      <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                    </yin:reference>
                  </yin:typedef>
                </yin:type>
              </yin:type>
              <yin:description>
                <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The address of remote syslog server.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="port">
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The port on which remote syslog server listens</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:list>
    </yin:container>
    <yin:container name="ntp">
      <yin:description>
        <yin:text>NTP configuration.</yin:text>
      </yin:description>
      <yin:list name="server">
        <yin:key value="ip-address"/>
        <yin:description>
          <yin:text>The list of NTP servers configured for this device.</yin:text>
        </yin:description>
        <yin:leaf name="ip-address">
          <yin:type name="inet:ip-address">
            <yin:typedef name="ip-address">
              <yin:type name="union">
                <yin:type name="inet:ipv4-address">
                  <yin:typedef name="ipv4-address">
                    <yin:type name="string">
                      <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                    </yin:type>
                    <yin:description>
                      <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                    </yin:description>
                  </yin:typedef>
                </yin:type>
                <yin:type name="inet:ipv6-address">
                  <yin:typedef name="ipv6-address">
                    <yin:type name="string">
                      <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                      <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                    </yin:type>
                    <yin:description>
                      <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                    </yin:description>
                    <yin:reference>
                      <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                    </yin:reference>
                  </yin:typedef>
                </yin:type>
              </yin:type>
              <yin:description>
                <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The address of NTP server.</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:list>
    </yin:container>
    <yin:container name="metrics">
      <yin:description>
        <yin:text>Parameters controlling metric configuration and collection</yin:text>
      </yin:description>
      <yin:leaf name="sample-period">
        <yin:description>
          <yin:text>The period on which metrics are sampled</yin:text>
        </yin:description>
        <yin:default value="5"/>
        <yin:type name="int8">
          <yin:range value="1..10"/>
        </yin:type>
        <yin:units name="seconds"/>
      </yin:leaf>
    </yin:container>
    <yin:container name="audit">
      <yin:description>
        <yin:text>Configuration for audit events</yin:text>
      </yin:description>
      <yin:container name="traffic">
        <yin:description>
          <yin:text>Configuration for traffic requests</yin:text>
        </yin:description>
        <yin:leaf name="enabled">
          <yin:type name="boolean"/>
          <yin:default value="false"/>
          <yin:description>
            <yin:text>Enable/disable logging of traffic requests</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:container>
      <yin:container name="administration">
        <yin:description>
          <yin:text>Configuration for administration events</yin:text>
        </yin:description>
        <yin:leaf name="enabled">
          <yin:type name="boolean"/>
          <yin:default value="false"/>
          <yin:description>
            <yin:text>Enable/disable logging of administration events</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:container>
      <yin:container name="system">
        <yin:description>
          <yin:text>Configuration for system events</yin:text>
        </yin:description>
        <yin:leaf name="enabled">
          <yin:type name="boolean"/>
          <yin:default value="false"/>
          <yin:description>
            <yin:text>Enable/disable logging of system events</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:container>
    </yin:container>
    <yin:container xmlns:sys-svcs="http://128technology.com/t128/config/system-config/services" name="services" module-prefix="sys-svcs">
      <t128-internal:visibility>advanced</t128-internal:visibility>
      <yin:description>
        <yin:text>Address information for internal services</yin:text>
      </yin:description>
      <yin:list name="local-forwarding-params">
        <yin:key value="ip-address"/>
        <yin:description>
          <yin:text>Parameters to perform SSH local forwarding to Controls</yin:text>
        </yin:description>
        <yin:config value="false"/>
        <t128-internal:visibility>hidden</t128-internal:visibility>
        <yin:leaf name="ip-address">
          <yin:type name="inet:ip-address">
            <yin:typedef name="ip-address">
              <yin:type name="union">
                <yin:type name="inet:ipv4-address">
                  <yin:typedef name="ipv4-address">
                    <yin:type name="string">
                      <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                    </yin:type>
                    <yin:description>
                      <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                    </yin:description>
                  </yin:typedef>
                </yin:type>
                <yin:type name="inet:ipv6-address">
                  <yin:typedef name="ipv6-address">
                    <yin:type name="string">
                      <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                      <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                    </yin:type>
                    <yin:description>
                      <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                    </yin:description>
                    <yin:reference>
                      <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                    </yin:reference>
                  </yin:typedef>
                </yin:type>
              </yin:type>
              <yin:description>
                <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>Local address to which client connects to establish SSH tunnel</yin:text>
          </yin:description>
          <yin:config value="false"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="id">
          <yin:type name="t128ext:node-id">
            <yin:typedef name="node-id">
              <yin:description>
                <yin:text>An index number of a node in the 128T system</yin:text>
              </yin:description>
              <yin:type name="uint16">
                <yin:range value="1..65535"/>
              </yin:type>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>Node id of a node to which SSH tunnel is established</yin:text>
          </yin:description>
          <yin:config value="false"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
      </yin:list>
      <yin:list name="conductor-local-forwarding-params">
        <yin:key value="ip-address"/>
        <yin:description>
          <yin:text>Parameters to perform SSH local forwarding to Conductor</yin:text>
        </yin:description>
        <yin:config value="false"/>
        <t128-internal:visibility>hidden</t128-internal:visibility>
        <yin:leaf name="ip-address">
          <yin:type name="inet:ip-address">
            <yin:typedef name="ip-address">
              <yin:type name="union">
                <yin:type name="inet:ipv4-address">
                  <yin:typedef name="ipv4-address">
                    <yin:type name="string">
                      <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                    </yin:type>
                    <yin:description>
                      <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                    </yin:description>
                  </yin:typedef>
                </yin:type>
                <yin:type name="inet:ipv6-address">
                  <yin:typedef name="ipv6-address">
                    <yin:type name="string">
                      <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                      <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                    </yin:type>
                    <yin:description>
                      <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                    </yin:description>
                    <yin:reference>
                      <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                    </yin:reference>
                  </yin:typedef>
                </yin:type>
              </yin:type>
              <yin:description>
                <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>Local address to which client connects to establish SSH tunnel</yin:text>
          </yin:description>
          <yin:config value="false"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="id">
          <yin:type name="t128ext:node-id">
            <yin:typedef name="node-id">
              <yin:description>
                <yin:text>An index number of a node in the 128T system</yin:text>
              </yin:description>
              <yin:type name="uint16">
                <yin:range value="1..65535"/>
              </yin:type>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>Node id of a node to which SSH tunnel is established</yin:text>
          </yin:description>
          <yin:config value="false"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
      </yin:list>
      <yin:container name="epm">
        <yin:description>
          <yin:text>Address information for external protocol manager</yin:text>
        </yin:description>
        <yin:leaf name="ip-address">
          <yin:type name="inet:ipv4-address">
            <yin:pattern value="[^0].*"/>
            <yin:typedef name="ipv4-address">
              <yin:type name="string">
                <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
              </yin:type>
              <yin:description>
                <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
              </yin:description>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The address on which epm listens</yin:text>
          </yin:description>
          <yin:default value="127.0.0.1"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="port">
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The port on which epm listens</yin:text>
          </yin:description>
          <yin:default value="14444"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="local-forwarding-port">
          <yin:config value="false"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The local port to which client connects to establish SSH tunnel with stats epm</yin:text>
          </yin:description>
          <yin:default value="4389"/>
        </yin:leaf>
      </yin:container>
      <yin:container name="pdm">
        <yin:description>
          <yin:text>Address information for the PDM</yin:text>
        </yin:description>
        <yin:leaf name="ip-address">
          <yin:type name="inet:ipv4-address">
            <yin:pattern value="[^0].*"/>
            <yin:typedef name="ipv4-address">
              <yin:type name="string">
                <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
              </yin:type>
              <yin:description>
                <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
              </yin:description>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The address on which the PDM listens</yin:text>
          </yin:description>
          <yin:default value="127.0.0.1"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="port">
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The port on which the PDM listens</yin:text>
          </yin:description>
          <yin:default value="830"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="local-forwarding-port">
          <yin:config value="false"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The local port to which client connects to establish SSH tunnel with pdm</yin:text>
          </yin:description>
          <yin:default value="0"/>
        </yin:leaf>
      </yin:container>
      <yin:container name="routing-engine-listener">
        <yin:description>
          <yin:text>Address information for the routing engine</yin:text>
        </yin:description>
        <yin:leaf name="ip-address">
          <yin:config value="false"/>
          <yin:type name="inet:ipv4-address">
            <yin:pattern value="[^0].*"/>
            <yin:typedef name="ipv4-address">
              <yin:type name="string">
                <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
              </yin:type>
              <yin:description>
                <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
              </yin:description>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The address on which the routing engine listens</yin:text>
          </yin:description>
          <yin:default value="127.0.0.1"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="port">
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The port on which the routing engine listens</yin:text>
          </yin:description>
          <yin:default value="2620"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="local-forwarding-port">
          <yin:config value="false"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The local port to which client connects to establish SSH tunnel with routing engine</yin:text>
          </yin:description>
          <yin:default value="4387"/>
        </yin:leaf>
      </yin:container>
      <yin:container name="routing-agent-listener">
        <yin:description>
          <yin:text>Address information for the routing agent listener</yin:text>
        </yin:description>
        <yin:leaf name="ip-address">
          <yin:type name="inet:ipv4-address">
            <yin:pattern value="[^0].*"/>
            <yin:typedef name="ipv4-address">
              <yin:type name="string">
                <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
              </yin:type>
              <yin:description>
                <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
              </yin:description>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The address on which the routing manager listens for routing
agent connections</yin:text>
          </yin:description>
          <yin:default value="127.0.0.1"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="port">
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The port on which the routing manager listens</yin:text>
          </yin:description>
          <yin:default value="13333"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="local-forwarding-port">
          <yin:config value="false"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The local port to which client connects to establish SSH tunnel with routing manager</yin:text>
          </yin:description>
          <yin:default value="4388"/>
        </yin:leaf>
      </yin:container>
      <yin:container name="system-services-coordinator">
        <yin:description>
          <yin:text>Address information for the system services coordinator</yin:text>
        </yin:description>
        <yin:leaf name="ip-address">
          <yin:type name="inet:ipv4-address">
            <yin:typedef name="ipv4-address">
              <yin:type name="string">
                <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
              </yin:type>
              <yin:description>
                <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
              </yin:description>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The address on which the system services coordinator listens</yin:text>
          </yin:description>
          <yin:default value="127.0.0.1"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="port">
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The port on which the system services coordinator listens</yin:text>
          </yin:description>
          <yin:default value="12222"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="local-forwarding-port">
          <yin:config value="false"/>
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The local port to which client connects to establish SSH tunnel with SSC</yin:text>
          </yin:description>
          <yin:default value="4381"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
      </yin:container>
      <yin:container name="webserver">
        <yin:description>
          <yin:text>Web server &amp; REST API.</yin:text>
        </yin:description>
        <yin:leaf name="enabled">
          <yin:type name="boolean"/>
          <yin:default value="true"/>
          <yin:description>
            <yin:text>Enable Web server &amp; REST API on all control nodes in this router.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="port">
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:default value="443"/>
          <yin:description>
            <yin:text>The port on which the Web servers listen.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:list name="server">
          <yin:key value="node-name"/>
          <yin:description>
            <yin:text>List of control node server addresses. When present,
they override the defaults from global configuration.</yin:text>
          </yin:description>
          <yin:leaf name="node-name">
            <yin:type name="leafref">
              <yin:path value="../../../../../sys:node/sys:name"/>
              <yin:type name="t128ext:name-id">
                <yin:typedef name="name-id">
                  <yin:description>
                    <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
                  </yin:description>
                  <yin:type name="string">
                    <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                      <yin:error-message>
                        <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                      </yin:error-message>
                    </yin:pattern>
                    <yin:length value="0..63"/>
                  </yin:type>
                </yin:typedef>
              </yin:type>
            </yin:type>
            <yin:description>
              <yin:text>The name of the control node.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="ip-address">
            <yin:type name="inet:ip-address">
              <yin:typedef name="ip-address">
                <yin:type name="union">
                  <yin:type name="inet:ipv4-address">
                    <yin:typedef name="ipv4-address">
                      <yin:type name="string">
                        <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                      </yin:description>
                    </yin:typedef>
                  </yin:type>
                  <yin:type name="inet:ipv6-address">
                    <yin:typedef name="ipv6-address">
                      <yin:type name="string">
                        <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                        <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                      </yin:description>
                      <yin:reference>
                        <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                      </yin:reference>
                    </yin:typedef>
                  </yin:type>
                </yin:type>
                <yin:description>
                  <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
                </yin:description>
                <yin:reference>
                  <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
                </yin:reference>
              </yin:typedef>
            </yin:type>
            <yin:mandatory value="true"/>
            <yin:description>
              <yin:text>IP address for the server on the control node.</yin:text>
            </yin:description>
          </yin:leaf>
        </yin:list>
        <yin:leaf name="ip-address">
          <yin:status value="deprecated"/>
          <yin:type name="inet:ipv4-address">
            <yin:pattern value="[^0].*"/>
            <yin:typedef name="ipv4-address">
              <yin:type name="string">
                <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
              </yin:type>
              <yin:description>
                <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
              </yin:description>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The address on which the Web server listens. Immediately after committing this change,
you need to use the new address to access the REST API and the user interface.</yin:text>
          </yin:description>
          <yin:default value="127.0.0.1"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="local-forwarding-port">
          <yin:status value="deprecated"/>
          <yin:config value="false"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The local port to which client connects to establish SSH tunnel with Web server</yin:text>
          </yin:description>
          <yin:default value="0"/>
        </yin:leaf>
      </yin:container>
      <yin:container name="runtime-data-store">
        <yin:description>
          <yin:text>Address information for the runtime datastore</yin:text>
        </yin:description>
        <yin:leaf name="ip-address">
          <yin:type name="inet:ipv4-address">
            <yin:pattern value="[^0].*"/>
            <yin:typedef name="ipv4-address">
              <yin:type name="string">
                <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
              </yin:type>
              <yin:description>
                <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
              </yin:description>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The address on which the runtime datastore listens</yin:text>
          </yin:description>
          <yin:default value="127.0.0.1"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="port">
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The port on which the runtime datastore listens</yin:text>
          </yin:description>
          <yin:default value="6379"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
        </yin:leaf>
        <yin:leaf name="local-forwarding-port">
          <yin:config value="false"/>
          <t128-internal:visibility>hidden</t128-internal:visibility>
          <yin:type name="t128ext:l4-port">
            <yin:typedef name="l4-port">
              <yin:description>
                <yin:text>Transport (layer 4) port number</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>The local port to which client connects to establish SSH tunnel with runtime datastore</yin:text>
          </yin:description>
          <yin:default value="4391"/>
        </yin:leaf>
      </yin:container>
    </yin:container>
  </yin:container>
  <yin:list xmlns:sys="http://128technology.com/t128/config/system-config" name="node" module-prefix="sys">
    <yin:key value="name"/>
    <yin:unique tag="id"/>
    <yin:description>
      <yin:text>List of 128T software instances, including controls, slices, and combos.</yin:text>
    </yin:description>
    <t128-codegen:base-object/>
    <yin:must condition="count(../../authy:router/node[asset-id = current()/asset-id]) = 0 or count(../../authy:router/node[asset-id = current()/asset-id]) = 1">
      <yin:error-message>
        <yin:value>asset-id must be unique within an authority</yin:value>
      </yin:error-message>
    </yin:must>
    <yin:leaf name="name">
      <yin:type name="t128ext:name-id">
        <yin:typedef name="name-id">
          <yin:description>
            <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
          </yin:description>
          <yin:type name="string">
            <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
              <yin:error-message>
                <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
              </yin:error-message>
            </yin:pattern>
            <yin:length value="0..63"/>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <t128ext:help>key identifier</t128ext:help>
      <yin:description>
        <yin:text>An arbitrary, unique name for the node, used to reference it in other
configuration sections.  This MUST match the name in the local
initialization file.</yin:text>
      </yin:description>
      <t128ext:example>core-1</t128ext:example>
    </yin:leaf>
    <yin:leaf name="id">
      <yin:type name="t128ext:node-id">
        <yin:typedef name="node-id">
          <yin:description>
            <yin:text>An index number of a node in the 128T system</yin:text>
          </yin:description>
          <yin:type name="uint16">
            <yin:range value="1..65535"/>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <t128ext:help>node number</t128ext:help>
      <yin:description>
        <yin:text>Unique node number (or index) with the system to be used in the
global network interface identifier (node#, interface#, vlan)</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="asset-id">
      <yin:type name="t128ext:asset-id">
        <yin:typedef name="asset-id">
          <yin:description>
            <yin:text>A unique identifier of a 128T node</yin:text>
          </yin:description>
          <yin:type name="string"/>
        </yin:typedef>
      </yin:type>
      <t128ext:help>A unique identifier of a 128T node</t128ext:help>
      <yin:description>
        <yin:text>A unique identifier of a 128T node used for automated provisioning</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="description">
      <yin:type name="string"/>
      <yin:description>
        <yin:text>A description about the node.</yin:text>
      </yin:description>
      <t128ext:example>A SLiCE running on our web services VM blades.</t128ext:example>
    </yin:leaf>
    <yin:leaf name="enabled">
      <yin:type name="boolean"/>
      <yin:default value="true"/>
      <yin:description>
        <yin:text>Enable/disable the whole node.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="location">
      <yin:type name="string"/>
      <yin:description>
        <yin:text>The node's location.</yin:text>
      </yin:description>
      <t128ext:example>Rack 23, blade 6.</t128ext:example>
    </yin:leaf>
    <yin:leaf name="role">
      <yin:type name="t128ext:node-role">
        <yin:typedef name="node-role">
          <yin:description>
            <yin:text>The node's role in the 128T system.</yin:text>
          </yin:description>
          <yin:type name="enumeration">
            <yin:enum name="control">
              <yin:description>
                <yin:text>A Control and Operations Resource node</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="slice">
              <yin:description>
                <yin:text>A Software Line-Card Engine node</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="combo">
              <yin:description>
                <yin:text>A combined Control and Slice</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="conductor">
              <yin:description>
                <yin:text>A remote management system</yin:text>
              </yin:description>
            </yin:enum>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <yin:description>
        <yin:text>The node's role in the 128T system.</yin:text>
      </yin:description>
      <yin:mandatory value="true"/>
    </yin:leaf>
    <yin:list name="device-interface">
      <yin:when condition="../role = 'slice' or ../role = 'combo'"/>
      <yin:key value="id"/>
      <yin:description>
        <yin:text>List of physical or virtual interfaces in the node.</yin:text>
      </yin:description>
      <yin:must condition="type != 'ethernet' or pci-address">
        <yin:error-message>
          <yin:value>PCI address is required when type is ethernet.</yin:value>
        </yin:error-message>
      </yin:must>
      <yin:must condition="(type != 'kni') or not (mode) or (mode != 'bridged') or string-length(target-interface) &gt; 0">
        <yin:error-message>
          <yin:value>A target-interface must be set for bridged-mode KNI interfaces.</yin:value>
        </yin:error-message>
      </yin:must>
      <yin:leaf name="id">
        <yin:type name="t128ext:device-port">
          <yin:typedef name="device-port">
            <yin:description>
              <yin:text>A physical or virtual port number of a network interface</yin:text>
            </yin:description>
            <yin:type name="uint16"/>
          </yin:typedef>
        </yin:type>
        <t128ext:help>numeric identifier</t128ext:help>
        <yin:description>
          <yin:text>A unique number for the physical or virtual interface,
used to reference it in other configuration sections
and show commands.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="description">
        <yin:type name="string"/>
        <yin:description>
          <yin:text>A description of the device-interface.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="type">
        <yin:type name="enumeration">
          <yin:enum name="ethernet">
            <yin:description>
              <yin:text>A physical ethernet interface.</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="kni">
            <yin:description>
              <yin:text>A logical interface to VM, host process, or container instance.</yin:text>
            </yin:description>
          </yin:enum>
        </yin:type>
        <yin:default value="ethernet"/>
        <yin:description>
          <yin:text>Type of interface.</yin:text>
        </yin:description>
        <t128ext:example>ethernet</t128ext:example>
      </yin:leaf>
      <yin:leaf name="pci-address">
        <yin:when condition="../type = 'ethernet' or count(../type) = 0"/>
        <yin:type name="t128ext:pci-address">
          <yin:typedef name="pci-address">
            <yin:description>
              <yin:text>A PCI address specifying domain, bus, device, and function</yin:text>
            </yin:description>
            <yin:type name="string">
              <yin:pattern value="[0-9a-fA-F]{4}(:[0-9a-fA-F]{2}){2}\.[0-9]">
                <yin:error-message>
                  <yin:value>Must contain only hex digits or any of the following: . :
Required format: 'aaaa:bb:cc.d' (e.g. 0000:00:1d.0).</yin:value>
                </yin:error-message>
              </yin:pattern>
              <yin:length value="0..13"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
        <t128ext:help>PCI address in format aaaa:bb:cc.d</t128ext:help>
        <yin:description>
          <yin:text>The PCI address of the device.  Only relevant if type
is ethernet.</yin:text>
        </yin:description>
        <t128ext:example>0000:00:09.1</t128ext:example>
      </yin:leaf>
      <yin:leaf name="mode">
        <yin:when condition="../type = 'kni'"/>
        <yin:type name="enumeration">
          <yin:enum name="host">
            <yin:description>
              <yin:text>A logical interface to the host system.</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="bridged">
            <yin:description>
              <yin:text>Bridges to a target-interface.</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="vhost">
            <yin:description>
              <yin:text>A logical interface to a hosted VM.</yin:text>
            </yin:description>
          </yin:enum>
        </yin:type>
        <yin:default value="host"/>
        <yin:description>
          <yin:text>Type of KNI connection.</yin:text>
        </yin:description>
        <t128ext:example>host</t128ext:example>
      </yin:leaf>
      <yin:leaf name="target-interface">
        <yin:when condition="../mode = 'bridged'"/>
        <yin:type name="string"/>
        <yin:description>
          <yin:text>Specifies the name of an external interface to be
automatically bridged to this KNI device.</yin:text>
        </yin:description>
        <t128ext:example>eth0</t128ext:example>
      </yin:leaf>
      <yin:leaf name="enabled">
        <yin:type name="boolean"/>
        <yin:default value="true"/>
        <yin:description>
          <yin:text>Whether this interface is administratively enabled.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="transmit-cap">
        <yin:type name="t128ext:limit">
          <yin:typedef name="limit">
            <yin:type name="union">
              <yin:type name="uint64">
                <yin:range value="0..999999999999"/>
              </yin:type>
              <yin:type name="enumeration">
                <yin:enum name="unlimited">
                  <yin:description>
                    <yin:text>No limit on this value</yin:text>
                  </yin:description>
                </yin:enum>
              </yin:type>
            </yin:type>
            <yin:default value="unlimited"/>
            <t128-codegen:type>string</t128-codegen:type>
            <yin:description>
              <yin:text>A type for defining values such as rates and capacities for which the
default value is unlimited</yin:text>
            </yin:description>
          </yin:typedef>
        </yin:type>
        <yin:units name="bits/second"/>
        <yin:description>
          <yin:text>Value that is used in conjunction with the negotiated link
speed to determine the transmit capacity of the interface.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf-list name="capture-filter">
        <yin:type name="string"/>
        <yin:description>
          <yin:text>Filter to be used when matching packets on this device
interface. Uses Berkeley Packet Filter (BPF) syntax.</yin:text>
        </yin:description>
      </yin:leaf-list>
      <yin:leaf name="shared-phys-address">
        <yin:type name="yang:phys-address">
          <yin:typedef name="phys-address">
            <yin:type name="yang:hex-string">
              <yin:typedef name="hex-string">
                <yin:type name="string">
                  <yin:pattern value="([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?">
                    <yin:error-message>
                      <yin:value>Required format: 'XX:XX:XX:XX:XX:XX', where 'X' is a hexidecimal digit (e.g., 00:0a:95:9d:68:16). Length may vary from the example shown.</yin:value>
                    </yin:error-message>
                  </yin:pattern>
                </yin:type>
                <yin:description>
                  <yin:text>A hexadecimal string with octets represented as hex digits
separated by colons.  The canonical representation uses
lowercase characters.</yin:text>
                </yin:description>
              </yin:typedef>
            </yin:type>
            <yin:description>
              <yin:text>Represents media- or physical-level addresses represented
as a sequence octets, each octet represented by two hexadecimal
numbers.  Octets are separated by colons.  The canonical
representation uses lowercase characters.

In the value set and its semantics, this type is equivalent
to the PhysAddress textual convention of the SMIv2.</yin:text>
            </yin:description>
            <yin:reference>
              <yin:text>RFC 2579: Textual Conventions for SMIv2</yin:text>
            </yin:reference>
          </yin:typedef>
        </yin:type>
        <yin:must condition="not(contains('13579bBdDfF',substring(./text(),2,1)))">
          <yin:error-message>
            <yin:value>Shared physical address must not be a multicast address</yin:value>
          </yin:error-message>
        </yin:must>
        <yin:description>
          <yin:text>Virtual MAC address for interface redundancy.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:list xmlns:if="http://128technology.com/t128/config/interface-config" name="network-interface" module-prefix="if">
        <yin:key value="name"/>
        <yin:unique tag="vlan"/>
        <yin:unique tag="global-id"/>
        <yin:description>
          <yin:text>List of network interfaces for the device-interface.</yin:text>
        </yin:description>
        <t128-codegen:do-not-nest/>
        <t128-codegen:setters/>
        <yin:must condition="count(../../sys:device-interface/network-interface[name = current()/name]) = 1">
          <yin:error-message>
            <yin:value>name of network-interface must be unique within a node</yin:value>
          </yin:error-message>
        </yin:must>
        <yin:leaf name="name">
          <yin:type name="t128ext:name-id">
            <yin:typedef name="name-id">
              <yin:description>
                <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
              </yin:description>
              <yin:type name="string">
                <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                  <yin:error-message>
                    <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                  </yin:error-message>
                </yin:pattern>
                <yin:length value="0..63"/>
              </yin:type>
            </yin:typedef>
          </yin:type>
          <t128ext:help>key identifier</t128ext:help>
          <yin:description>
            <yin:text>An arbitrary, unique name for the interface, used to reference it in other
configuration sections.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="global-id">
          <yin:type name="t128ext:global-interface-id">
            <yin:typedef name="global-interface-id">
              <yin:description>
                <yin:text>A global interface identifier which is a virtual interface across
an entire 128T router. This can be a single network interface or a
set of network interfaces in interface redundancy.</yin:text>
              </yin:description>
              <yin:type name="uint32">
                <yin:range value="1..4294967295"/>
              </yin:type>
            </yin:typedef>
          </yin:type>
          <yin:description>
            <yin:text>Global Interface Id (GIID) used in next-hop egress interface for routing data.
All instances of a redundant interface will have the same GIID.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="description">
          <yin:type name="string"/>
          <yin:description>
            <yin:text>A description about the interface.</yin:text>
          </yin:description>
          <t128ext:example>Public interface facing the Internet.</t128ext:example>
        </yin:leaf>
        <yin:leaf name="enabled">
          <yin:type name="boolean"/>
          <yin:default value="true"/>
          <yin:description>
            <yin:text>Administratively enable/disable the interface.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="vlan">
          <yin:when condition="../../sys:type = 'ethernet'"/>
          <yin:type name="t128ext:vlan">
            <yin:typedef name="vlan">
              <yin:description>
                <yin:text>A VLAN identifier (0 for no VLAN, otherwise 1-4094).</yin:text>
              </yin:description>
              <yin:type name="uint16">
                <yin:range value="0..4094"/>
              </yin:type>
            </yin:typedef>
          </yin:type>
          <yin:default value="0"/>
          <yin:description>
            <yin:text>The VLAN id for the interface (0 for no VLAN, otherwise 1-4094).</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="type">
          <yin:description>
            <yin:text>Type of network that the interface is connected to.</yin:text>
          </yin:description>
          <yin:type name="enumeration">
            <yin:enum name="fabric">
              <yin:description>
                <yin:text>Fabric network for inter-node traffic.</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="external">
              <yin:description>
                <yin:text>External network for regular traffic.</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="shared">
              <yin:description>
                <yin:text>Network is both 'fabric' and 'external'.</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="auto">
              <yin:description>
                <yin:text>Type of network is automatically detected.</yin:text>
              </yin:description>
            </yin:enum>
          </yin:type>
          <yin:default value="external"/>
        </yin:leaf>
        <yin:list name="neighborhood">
          <yin:key value="name"/>
          <yin:ordered-by value="user"/>
          <yin:description>
            <yin:text>The neighborhoods to which this interface belongs.</yin:text>
          </yin:description>
          <yin:leaf name="name">
            <yin:type name="t128ext:neighborhood-id">
              <yin:typedef name="neighborhood-id">
                <yin:description>
                  <yin:text>A string identifier for network neighborhood.</yin:text>
                </yin:description>
                <yin:type name="string">
                  <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                    <yin:error-message>
                      <yin:value>Must contain only alphanumeric characters, underscores, and dashes</yin:value>
                    </yin:error-message>
                  </yin:pattern>
                  <yin:length value="0..63"/>
                </yin:type>
              </yin:typedef>
            </yin:type>
            <yin:description>
              <yin:text>The neighborhood to which this interface belongs.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="topology">
            <yin:description>
              <yin:text>Type of topology for this router in the network for the
neighborhood. This determines the other routers in the
neighborhood with which this router has an adjacency.</yin:text>
            </yin:description>
            <yin:type name="enumeration">
              <yin:enum name="mesh">
                <yin:description>
                  <yin:text>Full mesh. This router will have adjacencies to all other
routers in the neighborhood.</yin:text>
                </yin:description>
              </yin:enum>
              <yin:enum name="hub">
                <yin:description>
                  <yin:text>The router is a hub in a hub-and-spoke topology. The router will
have adjacencies with other routers in the neighborhood that are
labeled 'spoke' or 'mesh'.</yin:text>
                </yin:description>
              </yin:enum>
              <yin:enum name="spoke">
                <yin:description>
                  <yin:text>The router is a spoke in a hub-and-spoke topology. The router will
have adjacencies with other routers in the neighborhood that are
labeled 'hub' or 'mesh'.</yin:text>
                </yin:description>
              </yin:enum>
            </yin:type>
            <yin:default value="mesh"/>
          </yin:leaf>
          <yin:leaf name="vector">
            <yin:type name="t128ext:name-id">
              <yin:typedef name="name-id">
                <yin:description>
                  <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
                </yin:description>
                <yin:type name="string">
                  <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                    <yin:error-message>
                      <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                    </yin:error-message>
                  </yin:pattern>
                  <yin:length value="0..63"/>
                </yin:type>
              </yin:typedef>
            </yin:type>
            <yin:description>
              <yin:text>Vector name to associate with adjacencies in the neighborhood.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="qp-value">
            <yin:type name="uint32"/>
            <yin:default value="0"/>
            <yin:description>
              <yin:text>Quality points value that represents the 'quality' of the the links
to adjacent routers in the neighborhood. Used for selecting egress
interface based on the service class required minimum quality points.</yin:text>
            </yin:description>
          </yin:leaf>
        </yin:list>
        <yin:leaf name="tenant">
          <yin:type name="authy:tenant-ref">
            <yin:typedef name="tenant-ref">
              <yin:type name="leafref">
                <yin:path value="/t128:config/authy:authority/authy:tenant/authy:name"/>
                <yin:type name="t128ext:tenant-name">
                  <yin:typedef name="tenant-name">
                    <yin:description>
                      <yin:text>A string identifier for a tenant, which uses alphanumerics, underscores,
dots, or dashes, and cannot exceed 253 characters (similar to domain-name).</yin:text>
                    </yin:description>
                    <yin:type name="string">
                      <yin:pattern value="((([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9])?">
                        <yin:error-message>
                          <yin:value>Must contain only alphanumeric characters or any of the following: - _ .</yin:value>
                        </yin:error-message>
                      </yin:pattern>
                      <yin:length value="0..253"/>
                    </yin:type>
                  </yin:typedef>
                </yin:type>
              </yin:type>
              <yin:description>
                <yin:text>This type is used by other entities that need to reference
configured tenants.</yin:text>
              </yin:description>
            </yin:typedef>
            <yin:type name="t128ext:tenant-name">
              <yin:typedef name="tenant-name">
                <yin:description>
                  <yin:text>A string identifier for a tenant, which uses alphanumerics, underscores,
dots, or dashes, and cannot exceed 253 characters (similar to domain-name).</yin:text>
                </yin:description>
                <yin:type name="string">
                  <yin:pattern value="((([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9])?">
                    <yin:error-message>
                      <yin:value>Must contain only alphanumeric characters or any of the following: - _ .</yin:value>
                    </yin:error-message>
                  </yin:pattern>
                  <yin:length value="0..253"/>
                </yin:type>
              </yin:typedef>
            </yin:type>
          </yin:type>
          <yin:default value=""/>
          <t128ext:help>owner tenant name</t128ext:help>
          <yin:description>
            <yin:text>Tenant to which this interface belongs.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="inter-router-security">
          <yin:type name="authy:security-ref">
            <yin:typedef name="security-ref">
              <yin:type name="leafref">
                <yin:path value="/t128:config/authy:authority/authy:security/authy:name"/>
                <yin:type name="t128ext:name-id">
                  <yin:typedef name="name-id">
                    <yin:description>
                      <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
                    </yin:description>
                    <yin:type name="string">
                      <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                        <yin:error-message>
                          <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                        </yin:error-message>
                      </yin:pattern>
                      <yin:length value="0..63"/>
                    </yin:type>
                  </yin:typedef>
                </yin:type>
              </yin:type>
              <yin:description>
                <yin:text>This type is used by other entities that need to reference
configured security policies.</yin:text>
              </yin:description>
            </yin:typedef>
            <yin:type name="t128ext:name-id">
              <yin:typedef name="name-id">
                <yin:description>
                  <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
                </yin:description>
                <yin:type name="string">
                  <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                    <yin:error-message>
                      <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                    </yin:error-message>
                  </yin:pattern>
                  <yin:length value="0..63"/>
                </yin:type>
              </yin:typedef>
            </yin:type>
          </yin:type>
          <t128ext:help>security policy name</t128ext:help>
          <yin:description>
            <yin:text>The name of the security policy used for inbound inter-router
traffic.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="rewrite-dscp">
          <yin:type name="boolean"/>
          <t128-codegen:replacing>classify</t128-codegen:replacing>
          <yin:description>
            <yin:text>Controls if DSCP bits are rewritten on this interface.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="classify">
          <yin:type name="boolean"/>
          <yin:status value="deprecated"/>
          <yin:description>
            <yin:text>Controls if packet classification is enabled or disabled
on this interface.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="source-nat">
          <yin:type name="boolean"/>
          <yin:default value="false"/>
          <yin:description>
            <yin:text>Indicates whether source address and port translation (NAPT) is performed
for flows egressing the interface to the final destination.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="qp-value">
          <yin:type name="uint32"/>
          <yin:default value="0"/>
          <yin:description>
            <yin:text>Quality points value that represents the 'quality' of the network
the interface is connected to. It used for selecting egress
interface based on the service class required minimum quality points.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="mtu">
          <yin:type name="uint32"/>
          <yin:default value="1500"/>
          <yin:description>
            <yin:text>The maximum transmission unit (MTU) for packets sent on the interface.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:list name="address">
          <yin:key value="ip-address"/>
          <yin:when condition="../dhcp = 'disabled' or count(../dhcp) = 0"/>
          <yin:min-elements value="1"/>
          <yin:description>
            <yin:text>The list of IP addresses (along with subnet prefix length)
on the interface.</yin:text>
          </yin:description>
          <t128-codegen:default-constructor/>
          <t128-codegen:member-constructor/>
          <yin:leaf name="ip-address">
            <yin:type name="inet:ip-address">
              <yin:typedef name="ip-address">
                <yin:type name="union">
                  <yin:type name="inet:ipv4-address">
                    <yin:typedef name="ipv4-address">
                      <yin:type name="string">
                        <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                      </yin:description>
                    </yin:typedef>
                  </yin:type>
                  <yin:type name="inet:ipv6-address">
                    <yin:typedef name="ipv6-address">
                      <yin:type name="string">
                        <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                        <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                      </yin:description>
                      <yin:reference>
                        <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                      </yin:reference>
                    </yin:typedef>
                  </yin:type>
                </yin:type>
                <yin:description>
                  <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
                </yin:description>
                <yin:reference>
                  <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
                </yin:reference>
              </yin:typedef>
            </yin:type>
            <yin:description>
              <yin:text>The IP address on the interface.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="utility-ip-address">
            <yin:type name="inet:ip-address">
              <yin:typedef name="ip-address">
                <yin:type name="union">
                  <yin:type name="inet:ipv4-address">
                    <yin:typedef name="ipv4-address">
                      <yin:type name="string">
                        <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                      </yin:description>
                    </yin:typedef>
                  </yin:type>
                  <yin:type name="inet:ipv6-address">
                    <yin:typedef name="ipv6-address">
                      <yin:type name="string">
                        <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                        <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                      </yin:description>
                      <yin:reference>
                        <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                      </yin:reference>
                    </yin:typedef>
                  </yin:type>
                </yin:type>
                <yin:description>
                  <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
                </yin:description>
                <yin:reference>
                  <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
                </yin:reference>
              </yin:typedef>
            </yin:type>
            <yin:mandatory value="false"/>
            <yin:description>
              <yin:text>Utility IP address used for purposes other than forwarding traffic.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="prefix-length">
            <yin:type name="uint8">
              <yin:range value="0..128"/>
            </yin:type>
            <yin:mandatory value="true"/>
            <yin:description>
              <yin:text>The length of the subnet prefix.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="gateway">
            <yin:type name="inet:ip-address">
              <yin:typedef name="ip-address">
                <yin:type name="union">
                  <yin:type name="inet:ipv4-address">
                    <yin:typedef name="ipv4-address">
                      <yin:type name="string">
                        <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                      </yin:description>
                    </yin:typedef>
                  </yin:type>
                  <yin:type name="inet:ipv6-address">
                    <yin:typedef name="ipv6-address">
                      <yin:type name="string">
                        <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                        <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                      </yin:description>
                      <yin:reference>
                        <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                      </yin:reference>
                    </yin:typedef>
                  </yin:type>
                </yin:type>
                <yin:description>
                  <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
                </yin:description>
                <yin:reference>
                  <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
                </yin:reference>
              </yin:typedef>
            </yin:type>
            <yin:mandatory value="false"/>
            <yin:description>
              <yin:text>Optional gateway for destinations outside the subnet of the interface.</yin:text>
            </yin:description>
          </yin:leaf>
        </yin:list>
        <yin:list name="neighbor">
          <yin:key value="ip-address"/>
          <yin:description>
            <yin:text>A list of mappings from IP addresses to physical addresses.
Entries in this list are used as static entries in the
ARP cache.</yin:text>
          </yin:description>
          <yin:reference>
            <yin:text>RFC 826: An Ethernet Address Resolution Protocol
RFC 4861: Neighbor Discovery for IP version 6 (IPv6)</yin:text>
          </yin:reference>
          <yin:leaf name="ip-address">
            <yin:type name="inet:ip-address">
              <yin:typedef name="ip-address">
                <yin:type name="union">
                  <yin:type name="inet:ipv4-address">
                    <yin:typedef name="ipv4-address">
                      <yin:type name="string">
                        <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                      </yin:description>
                    </yin:typedef>
                  </yin:type>
                  <yin:type name="inet:ipv6-address">
                    <yin:typedef name="ipv6-address">
                      <yin:type name="string">
                        <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                        <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                      </yin:description>
                      <yin:reference>
                        <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                      </yin:reference>
                    </yin:typedef>
                  </yin:type>
                </yin:type>
                <yin:description>
                  <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
                </yin:description>
                <yin:reference>
                  <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
                </yin:reference>
              </yin:typedef>
            </yin:type>
            <yin:description>
              <yin:text>The IP address of a neighbor node.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="phys-address">
            <yin:type name="yang:phys-address">
              <yin:typedef name="phys-address">
                <yin:type name="yang:hex-string">
                  <yin:typedef name="hex-string">
                    <yin:type name="string">
                      <yin:pattern value="([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?">
                        <yin:error-message>
                          <yin:value>Required format: 'XX:XX:XX:XX:XX:XX', where 'X' is a hexidecimal digit (e.g., 00:0a:95:9d:68:16). Length may vary from the example shown.</yin:value>
                        </yin:error-message>
                      </yin:pattern>
                    </yin:type>
                    <yin:description>
                      <yin:text>A hexadecimal string with octets represented as hex digits
separated by colons.  The canonical representation uses
lowercase characters.</yin:text>
                    </yin:description>
                  </yin:typedef>
                </yin:type>
                <yin:description>
                  <yin:text>Represents media- or physical-level addresses represented
as a sequence octets, each octet represented by two hexadecimal
numbers.  Octets are separated by colons.  The canonical
representation uses lowercase characters.

In the value set and its semantics, this type is equivalent
to the PhysAddress textual convention of the SMIv2.</yin:text>
                </yin:description>
                <yin:reference>
                  <yin:text>RFC 2579: Textual Conventions for SMIv2</yin:text>
                </yin:reference>
              </yin:typedef>
            </yin:type>
            <yin:mandatory value="true"/>
            <yin:description>
              <yin:text>The physical level address (MAC address) of the neighbor node.</yin:text>
            </yin:description>
          </yin:leaf>
        </yin:list>
        <yin:list name="adjacency">
          <t128-codegen:member-constructor/>
          <t128-codegen:setters/>
          <yin:key value="ip-address"/>
          <yin:description>
            <yin:text>A list of adjacent routers.</yin:text>
          </yin:description>
          <yin:leaf name="ip-address">
            <yin:type name="inet:ip-address">
              <yin:typedef name="ip-address">
                <yin:type name="union">
                  <yin:type name="inet:ipv4-address">
                    <yin:typedef name="ipv4-address">
                      <yin:type name="string">
                        <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                      </yin:description>
                    </yin:typedef>
                  </yin:type>
                  <yin:type name="inet:ipv6-address">
                    <yin:typedef name="ipv6-address">
                      <yin:type name="string">
                        <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                        <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                      </yin:description>
                      <yin:reference>
                        <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                      </yin:reference>
                    </yin:typedef>
                  </yin:type>
                </yin:type>
                <yin:description>
                  <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
                </yin:description>
                <yin:reference>
                  <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
                </yin:reference>
              </yin:typedef>
            </yin:type>
            <yin:description>
              <yin:text>The IP address of adjacent router or waypoint-address of the
peer router.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="peer">
            <yin:type name="leafref">
              <yin:path value="../../../../../authy:peer/authy:name"/>
              <yin:type name="t128ext:peer-name">
                <yin:typedef name="peer-name">
                  <yin:description>
                    <yin:text>A string identifier for a peer, which uses alphanumerics, underscores,
dots, or dashes, and cannot exceed 253 characters.</yin:text>
                  </yin:description>
                  <yin:type name="string">
                    <yin:pattern value="((([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9])?">
                      <yin:error-message>
                        <yin:value>Must contain only alphanumeric characters or any of the following: - _ .
(e.g., MyFirst-128T-Router).</yin:value>
                      </yin:error-message>
                    </yin:pattern>
                    <yin:length value="0..253"/>
                  </yin:type>
                </yin:typedef>
              </yin:type>
            </yin:type>
            <yin:default value=""/>
            <t128ext:help>Peer router name</t128ext:help>
            <yin:description>
              <yin:text>Peer router to which this waypoint address belongs.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="inter-router-security">
            <yin:type name="authy:security-ref">
              <yin:typedef name="security-ref">
                <yin:type name="leafref">
                  <yin:path value="/t128:config/authy:authority/authy:security/authy:name"/>
                  <yin:type name="t128ext:name-id">
                    <yin:typedef name="name-id">
                      <yin:description>
                        <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
                      </yin:description>
                      <yin:type name="string">
                        <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                          <yin:error-message>
                            <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                          </yin:error-message>
                        </yin:pattern>
                        <yin:length value="0..63"/>
                      </yin:type>
                    </yin:typedef>
                  </yin:type>
                </yin:type>
                <yin:description>
                  <yin:text>This type is used by other entities that need to reference
configured security policies.</yin:text>
                </yin:description>
              </yin:typedef>
              <yin:type name="t128ext:name-id">
                <yin:typedef name="name-id">
                  <yin:description>
                    <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
                  </yin:description>
                  <yin:type name="string">
                    <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                      <yin:error-message>
                        <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                      </yin:error-message>
                    </yin:pattern>
                    <yin:length value="0..63"/>
                  </yin:type>
                </yin:typedef>
              </yin:type>
            </yin:type>
            <t128ext:help>security policy name</t128ext:help>
            <yin:description>
              <yin:text>The name of the security policy used for inter-router traffic
to the peer via this adjacency.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf-list name="source-nat-address">
            <yin:type name="inet:ip-prefix">
              <yin:typedef name="ip-prefix">
                <yin:type name="union">
                  <yin:type name="inet:ipv4-prefix">
                    <yin:typedef name="ipv4-prefix">
                      <yin:type name="string">
                        <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv4-prefix type represents an IPv4 address prefix.
The prefix length is given by the number following the
slash character and must be less than or equal to 32.

A prefix length value of n corresponds to an IP address
mask that has n contiguous 1-bits from the most
significant bit (MSB) and all other bits set to 0.

The canonical format of an IPv4 prefix has all bits of
the IPv4 address set to zero that are not part of the
IPv4 prefix.</yin:text>
                      </yin:description>
                    </yin:typedef>
                  </yin:type>
                  <yin:type name="inet:ipv6-prefix">
                    <yin:typedef name="ipv6-prefix">
                      <yin:type name="string">
                        <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))"/>
                        <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv6-prefix type represents an IPv6 address prefix.
The prefix length is given by the number following the
slash character and must be less than or equal to 128.

A prefix length value of n corresponds to an IP address
mask that has n contiguous 1-bits from the most
significant bit (MSB) and all other bits set to 0.

The IPv6 address should have all bits that do not belong
to the prefix set to zero.

The canonical format of an IPv6 prefix has all bits of
the IPv6 address set to zero that are not part of the
IPv6 prefix.  Furthermore, the IPv6 address is represented
as defined in Section 4 of RFC 5952.</yin:text>
                      </yin:description>
                      <yin:reference>
                        <yin:text>RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                      </yin:reference>
                    </yin:typedef>
                  </yin:type>
                </yin:type>
                <yin:description>
                  <yin:text>The ip-prefix type represents an IP prefix and is IP
version neutral.  The format of the textual representations
implies the IP version.</yin:text>
                </yin:description>
              </yin:typedef>
            </yin:type>
            <yin:description>
              <yin:text>The source nat IP address or prefixes for packets received
on the interface.</yin:text>
            </yin:description>
          </yin:leaf-list>
          <yin:leaf name="external-nat-address">
            <yin:type name="inet:ip-address">
              <yin:typedef name="ip-address">
                <yin:type name="union">
                  <yin:type name="inet:ipv4-address">
                    <yin:typedef name="ipv4-address">
                      <yin:type name="string">
                        <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                      </yin:description>
                    </yin:typedef>
                  </yin:type>
                  <yin:type name="inet:ipv6-address">
                    <yin:typedef name="ipv6-address">
                      <yin:type name="string">
                        <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                        <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                      </yin:type>
                      <yin:description>
                        <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                      </yin:description>
                      <yin:reference>
                        <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                      </yin:reference>
                    </yin:typedef>
                  </yin:type>
                </yin:type>
                <yin:description>
                  <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
                </yin:description>
                <yin:reference>
                  <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
                </yin:reference>
              </yin:typedef>
            </yin:type>
            <yin:description>
              <yin:text>Nat IP address for local Ip mapped by an external device. This
is the source IP address that is seen by the adjacent router when
it receives a packet from this router.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="cost">
            <yin:type name="uint32"/>
            <yin:default value="0"/>
            <yin:description>
              <yin:text>Cost of the link.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf name="qp-value">
            <yin:type name="uint32"/>
            <yin:default value="0"/>
            <yin:description>
              <yin:text>Quality points value that represents the 'quality' of the
the link to the adjacent router. Used for selecting egress
interface based on the service class required minimum quality
points.</yin:text>
            </yin:description>
          </yin:leaf>
          <yin:leaf-list name="vector">
            <yin:type name="t128ext:name-id">
              <yin:typedef name="name-id">
                <yin:description>
                  <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
                </yin:description>
                <yin:type name="string">
                  <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                    <yin:error-message>
                      <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                    </yin:error-message>
                  </yin:pattern>
                  <yin:length value="0..63"/>
                </yin:type>
              </yin:typedef>
            </yin:type>
            <yin:description>
              <yin:text>Vector names for path selection.</yin:text>
            </yin:description>
          </yin:leaf-list>
          <yin:list name="port-range">
            <yin:key value="start-port"/>
            <yin:max-elements value="1"/>
            <yin:when condition="../peer != ''"/>
            <yin:description>
              <yin:text>Range of destination ports that peer router is reachable at</yin:text>
            </yin:description>
            <yin:leaf name="start-port">
              <yin:description>
                <yin:text>Lower transport (layer 4) port number.</yin:text>
              </yin:description>
              <yin:mandatory value="true"/>
              <yin:type name="t128ext:l4-port">
                <yin:range value="1025..16383"/>
                <yin:typedef name="l4-port">
                  <yin:description>
                    <yin:text>Transport (layer 4) port number</yin:text>
                  </yin:description>
                  <yin:type name="uint16"/>
                </yin:typedef>
              </yin:type>
            </yin:leaf>
            <yin:leaf name="end-port">
              <yin:description>
                <yin:text>Upper transport (layer 4) port number.</yin:text>
              </yin:description>
              <yin:mandatory value="false"/>
              <yin:type name="t128ext:l4-port">
                <yin:range value="1025..16383"/>
                <yin:typedef name="l4-port">
                  <yin:description>
                    <yin:text>Transport (layer 4) port number</yin:text>
                  </yin:description>
                  <yin:type name="uint16"/>
                </yin:typedef>
              </yin:type>
              <yin:must condition=". &gt;= ../start-port">
                <yin:error-message>
                  <yin:value>Upper port must be greater than the lower port</yin:value>
                </yin:error-message>
              </yin:must>
            </yin:leaf>
          </yin:list>
        </yin:list>
        <yin:leaf name="icmp">
          <yin:description>
            <yin:text>Enable/disable ICMP Blackhole</yin:text>
          </yin:description>
          <yin:type name="enumeration">
            <yin:enum name="drop">
              <yin:description>
                <yin:text>Neither respond to ICMP requests nor generate ICMP errors
to/from IPs on this interface</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="allow">
              <yin:description>
                <yin:text>Respond to ICMP requests and generate ICMP errors
to/from IPs on this interface</yin:text>
              </yin:description>
            </yin:enum>
          </yin:type>
          <yin:default value="allow"/>
        </yin:leaf>
        <yin:leaf name="dhcp">
          <yin:description>
            <yin:text>Whether this interface acquires IP address and other parameter via DHCP</yin:text>
          </yin:description>
          <yin:type name="enumeration">
            <yin:enum name="disabled">
              <yin:description>
                <yin:text>DHCP is disabled.</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="v4">
              <yin:description>
                <yin:text>Only DHCPv4 is enabled.</yin:text>
              </yin:description>
            </yin:enum>
          </yin:type>
          <yin:default value="disabled"/>
        </yin:leaf>
      </yin:list>
      <yin:container xmlns:dis="http://128technology.com/t128/state/device-interface-state" name="state" module-prefix="dis">
        <yin:config value="false"/>
        <yin:description>
          <yin:text>State data pertaining to the device-interface.</yin:text>
        </yin:description>
        <yin:presence value="Enable state data"/>
        <yin:leaf name="admin-status">
          <yin:type name="t128ext:admin-status">
            <yin:typedef name="admin-status">
              <yin:description>
                <yin:text>The desired state of the interface.</yin:text>
              </yin:description>
              <yin:type name="enumeration">
                <yin:enum name="up">
                  <yin:description>
                    <yin:text>Ready to pass packets.</yin:text>
                  </yin:description>
                </yin:enum>
                <yin:enum name="down">
                  <yin:description>
                    <yin:text>Not ready to pass packets and not in some test mode.</yin:text>
                  </yin:description>
                </yin:enum>
                <yin:enum name="testing">
                  <yin:description>
                    <yin:text>In some test mode.</yin:text>
                  </yin:description>
                </yin:enum>
                <yin:enum name="unknown">
                  <yin:description>
                    <yin:text>Status cannot be determined due to failure.</yin:text>
                  </yin:description>
                </yin:enum>
              </yin:type>
            </yin:typedef>
          </yin:type>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The desired state of the interface.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="oper-status">
          <yin:type name="t128ext:oper-status">
            <yin:typedef name="oper-status">
              <yin:description>
                <yin:text>The current operational state of the interface.</yin:text>
              </yin:description>
              <yin:type name="enumeration">
                <yin:enum name="up">
                  <yin:description>
                    <yin:text>Ready to pass packets.</yin:text>
                  </yin:description>
                </yin:enum>
                <yin:enum name="down">
                  <yin:description>
                    <yin:text>The interface does not pass any packets.</yin:text>
                  </yin:description>
                </yin:enum>
                <yin:enum name="testing">
                  <yin:description>
                    <yin:text>In some test mode. No operational packets can
be passed.</yin:text>
                  </yin:description>
                </yin:enum>
                <yin:enum name="unknown">
                  <yin:description>
                    <yin:text>Status cannot be determined due to failure.</yin:text>
                  </yin:description>
                </yin:enum>
                <yin:enum name="dormant">
                  <yin:description>
                    <yin:text>Waiting for some external event.</yin:text>
                  </yin:description>
                </yin:enum>
                <yin:enum name="not-present">
                  <yin:description>
                    <yin:text>Some component (typically hardware) is missing.</yin:text>
                  </yin:description>
                </yin:enum>
                <yin:enum name="lower-layer-down">
                  <yin:description>
                    <yin:text>Down due to state of lower-layer interface(s).</yin:text>
                  </yin:description>
                </yin:enum>
              </yin:type>
            </yin:typedef>
          </yin:type>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The current operational state of the interface.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="redundancy-status">
          <yin:type name="t128ext:redundancy-status">
            <yin:typedef name="redundancy-status">
              <yin:description>
                <yin:text>The redundancy state of the interface.</yin:text>
              </yin:description>
              <yin:type name="enumeration">
                <yin:enum name="active">
                  <yin:description>
                    <yin:text>Interface is active.</yin:text>
                  </yin:description>
                </yin:enum>
                <yin:enum name="standby">
                  <yin:description>
                    <yin:text>Interface is standby.</yin:text>
                  </yin:description>
                </yin:enum>
                <yin:enum name="non-redundant">
                  <yin:description>
                    <yin:text>Interface is not configured for redundancy.</yin:text>
                  </yin:description>
                </yin:enum>
                <yin:enum name="unknown">
                  <yin:description>
                    <yin:text>Status cannot be determined due to failure.</yin:text>
                  </yin:description>
                </yin:enum>
              </yin:type>
            </yin:typedef>
          </yin:type>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The current redundancy state of the interface.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="speed">
          <yin:type name="yang:gauge64">
            <yin:typedef name="gauge64">
              <yin:type name="uint64"/>
              <yin:description>
                <yin:text>The gauge64 type represents a non-negative integer, which
may increase or decrease, but shall never exceed a maximum
value, nor fall below a minimum value.  The maximum value
cannot be greater than 2^64-1 (18446744073709551615), and
the minimum value cannot be smaller than 0.  The value of
a gauge64 has its maximum value whenever the information
being modeled is greater than or equal to its maximum
value, and has its minimum value whenever the information
being modeled is smaller than or equal to its minimum value.
If the information being modeled subsequently decreases
below (increases above) the maximum (minimum) value, the
gauge64 also decreases (increases).

In the value set and its semantics, this type is equivalent
to the CounterBasedGauge64 SMIv2 textual convention defined
in RFC 2856</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 2856: Textual Conventions for Additional High Capacity
    Data Types</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:units name="bits/second"/>
          <yin:description>
            <yin:text>An estimate of the interface's current bandwidth in bits
per second.    For interfaces that do not vary in
bandwidth or for those where no accurate estimation can
be made, this node should contain the nominal bandwidth.
For interfaces that have no concept of bandwidth, this
node is not present.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="network-plugin-state">
          <yin:type name="string"/>
          <yin:description>
            <yin:text>This field contains JSON which has information about
the state of a network plugin. This information can
vary per card.</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:container>
      <yin:container xmlns:dis="http://128technology.com/t128/state/device-interface-state" name="statistics" module-prefix="dis">
        <yin:config value="false"/>
        <yin:description>
          <yin:text>Statistics pertaining to the device-interface.</yin:text>
        </yin:description>
        <yin:presence value="Enable statistics"/>
        <yin:leaf name="in-octets">
          <yin:type name="yang:counter64">
            <yin:typedef name="counter64">
              <yin:type name="uint64"/>
              <yin:description>
                <yin:text>The counter64 type represents a non-negative integer
that monotonically increases until it reaches a
maximum value of 2^64-1 (18446744073709551615 decimal),
when it wraps around and starts increasing again from zero.

Counters have no defined 'initial' value, and thus, a
single value of a counter has (in general) no information
content.  Discontinuities in the monotonically increasing
value normally occur at re-initialization of the
management system, and at other times as specified in the
description of a schema node using this type.  If such
other times can occur, for example, the creation of
a schema node of type counter64 at times other than
re-initialization, then a corresponding schema node
should be defined, with an appropriate type, to indicate
the last discontinuity.

The counter64 type should not be used for configuration
schema nodes.  A default statement SHOULD NOT be used in
combination with the type counter64.

In the value set and its semantics, this type is equivalent
to the Counter64 type of the SMIv2.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 2578: Structure of Management Information Version 2
    (SMIv2)</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The total number of octets received on the interface,
including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="in-unicast-pkts">
          <yin:type name="yang:counter64">
            <yin:typedef name="counter64">
              <yin:type name="uint64"/>
              <yin:description>
                <yin:text>The counter64 type represents a non-negative integer
that monotonically increases until it reaches a
maximum value of 2^64-1 (18446744073709551615 decimal),
when it wraps around and starts increasing again from zero.

Counters have no defined 'initial' value, and thus, a
single value of a counter has (in general) no information
content.  Discontinuities in the monotonically increasing
value normally occur at re-initialization of the
management system, and at other times as specified in the
description of a schema node using this type.  If such
other times can occur, for example, the creation of
a schema node of type counter64 at times other than
re-initialization, then a corresponding schema node
should be defined, with an appropriate type, to indicate
the last discontinuity.

The counter64 type should not be used for configuration
schema nodes.  A default statement SHOULD NOT be used in
combination with the type counter64.

In the value set and its semantics, this type is equivalent
to the Counter64 type of the SMIv2.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 2578: Structure of Management Information Version 2
    (SMIv2)</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were not addressed to a
multicast or broadcast address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="in-errors">
          <yin:type name="yang:counter32">
            <yin:typedef name="counter32">
              <yin:type name="uint32"/>
              <yin:description>
                <yin:text>The counter32 type represents a non-negative integer
that monotonically increases until it reaches a
maximum value of 2^32-1 (4294967295 decimal), when it
wraps around and starts increasing again from zero.

Counters have no defined 'initial' value, and thus, a
single value of a counter has (in general) no information
content.  Discontinuities in the monotonically increasing
value normally occur at re-initialization of the
management system, and at other times as specified in the
description of a schema node using this type.  If such
other times can occur, for example, the creation of
a schema node of type counter32 at times other than
re-initialization, then a corresponding schema node
should be defined, with an appropriate type, to indicate
the last discontinuity.

The counter32 type should not be used for configuration
schema nodes.  A default statement SHOULD NOT be used in
combination with the type counter32.

In the value set and its semantics, this type is equivalent
to the Counter32 type of the SMIv2.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 2578: Structure of Management Information Version 2
    (SMIv2)</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The number of inbound packets that contained errors
preventing them from being deliverable to a higher-layer
protocol.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="out-octets">
          <yin:type name="yang:counter64">
            <yin:typedef name="counter64">
              <yin:type name="uint64"/>
              <yin:description>
                <yin:text>The counter64 type represents a non-negative integer
that monotonically increases until it reaches a
maximum value of 2^64-1 (18446744073709551615 decimal),
when it wraps around and starts increasing again from zero.

Counters have no defined 'initial' value, and thus, a
single value of a counter has (in general) no information
content.  Discontinuities in the monotonically increasing
value normally occur at re-initialization of the
management system, and at other times as specified in the
description of a schema node using this type.  If such
other times can occur, for example, the creation of
a schema node of type counter64 at times other than
re-initialization, then a corresponding schema node
should be defined, with an appropriate type, to indicate
the last discontinuity.

The counter64 type should not be used for configuration
schema nodes.  A default statement SHOULD NOT be used in
combination with the type counter64.

In the value set and its semantics, this type is equivalent
to the Counter64 type of the SMIv2.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 2578: Structure of Management Information Version 2
    (SMIv2)</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The total number of octets transmitted out of the
interface, including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="out-unicast-pkts">
          <yin:type name="yang:counter64">
            <yin:typedef name="counter64">
              <yin:type name="uint64"/>
              <yin:description>
                <yin:text>The counter64 type represents a non-negative integer
that monotonically increases until it reaches a
maximum value of 2^64-1 (18446744073709551615 decimal),
when it wraps around and starts increasing again from zero.

Counters have no defined 'initial' value, and thus, a
single value of a counter has (in general) no information
content.  Discontinuities in the monotonically increasing
value normally occur at re-initialization of the
management system, and at other times as specified in the
description of a schema node using this type.  If such
other times can occur, for example, the creation of
a schema node of type counter64 at times other than
re-initialization, then a corresponding schema node
should be defined, with an appropriate type, to indicate
the last discontinuity.

The counter64 type should not be used for configuration
schema nodes.  A default statement SHOULD NOT be used in
combination with the type counter64.

In the value set and its semantics, this type is equivalent
to the Counter64 type of the SMIv2.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 2578: Structure of Management Information Version 2
    (SMIv2)</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The total number of packets that higher-level protocols
requested be transmitted, and that were not addressed
to a multicast or broadcast address at this sub-layer,
including those that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="out-errors">
          <yin:type name="yang:counter32">
            <yin:typedef name="counter32">
              <yin:type name="uint32"/>
              <yin:description>
                <yin:text>The counter32 type represents a non-negative integer
that monotonically increases until it reaches a
maximum value of 2^32-1 (4294967295 decimal), when it
wraps around and starts increasing again from zero.

Counters have no defined 'initial' value, and thus, a
single value of a counter has (in general) no information
content.  Discontinuities in the monotonically increasing
value normally occur at re-initialization of the
management system, and at other times as specified in the
description of a schema node using this type.  If such
other times can occur, for example, the creation of
a schema node of type counter32 at times other than
re-initialization, then a corresponding schema node
should be defined, with an appropriate type, to indicate
the last discontinuity.

The counter32 type should not be used for configuration
schema nodes.  A default statement SHOULD NOT be used in
combination with the type counter32.

In the value set and its semantics, this type is equivalent
to the Counter32 type of the SMIv2.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>RFC 2578: Structure of Management Information Version 2
    (SMIv2)</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The number of outbound packets that could not be
transmitted because of errors.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:container>
    </yin:list>
    <yin:list xmlns:alarm="http://128technology.com/t128/state/alarms" name="alarm" module-prefix="alarm">
      <yin:config value="false"/>
      <yin:description>
        <yin:text>Currently active alarms</yin:text>
      </yin:description>
      <yin:key value="uuid"/>
      <yin:unique tag="serial-id"/>
      <yin:leaf name="uuid">
        <yin:type name="yang:uuid">
          <yin:typedef name="uuid">
            <yin:type name="string">
              <yin:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
            </yin:type>
            <yin:description>
              <yin:text>A Universally Unique IDentifier in the string representation
defined in RFC 4122.  The canonical representation uses
lowercase characters.

The following is an example of a UUID in string representation:
f81d4fae-7dec-11d0-a765-00a0c91e6bf6
              </yin:text>
            </yin:description>
            <yin:reference>
              <yin:text>RFC 4122: A Universally Unique IDentifier (UUID) URN
    Namespace</yin:text>
            </yin:reference>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>A universally unique identifier for the alarm</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="serial-id">
        <yin:type name="uint32"/>
        <yin:description>
          <yin:text>An integer identifier for the alarm that will be one
greater than the serial-id of the most recent previously
triggered alarm</yin:text>
        </yin:description>
        <yin:mandatory value="true"/>
      </yin:leaf>
      <yin:leaf name="trigger-time">
        <yin:type name="yang:date-and-time">
          <yin:typedef name="date-and-time">
            <yin:type name="string">
              <yin:pattern value="\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})"/>
            </yin:type>
            <yin:description>
              <yin:text>The date-and-time type is a profile of the ISO 8601
standard for representation of dates and times using the
Gregorian calendar.  The profile is defined by the
date-time production in Section 5.6 of RFC 3339.

The date-and-time type is compatible with the dateTime XML
schema type with the following notable exceptions:

(a) The date-and-time type does not allow negative years.

(b) The date-and-time time-offset -00:00 indicates an unknown
time zone (see RFC 3339) while -00:00 and +00:00 and Z
all represent the same time zone in dateTime.

(c) The canonical format (see below) of data-and-time values
differs from the canonical format used by the dateTime XML
schema type, which requires all times to be in UTC using
the time-offset 'Z'.

This type is not equivalent to the DateAndTime textual
convention of the SMIv2 since RFC 3339 uses a different
separator between full-date and full-time and provides
higher resolution of time-secfrac.

The canonical format for date-and-time values with a known time
zone uses a numeric time zone offset that is calculated using
the device's configured known offset to UTC time.  A change of
the device's offset to UTC time will cause date-and-time values
to change accordingly.  Such changes might happen periodically
in case a server follows automatically daylight saving time
(DST) time zone offset changes.  The canonical format for
date-and-time values with an unknown time zone (usually
referring to the notion of local time) uses the time-offset
-00:00.</yin:text>
            </yin:description>
            <yin:reference>
              <yin:text>RFC 3339: Date and Time on the Internet: Timestamps
RFC 2579: Textual Conventions for SMIv2
XSD-TYPES: XML Schema Part 2: Datatypes Second Edition</yin:text>
            </yin:reference>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>The date and time at which the alarm was triggered</yin:text>
        </yin:description>
        <yin:mandatory value="true"/>
      </yin:leaf>
      <yin:leaf name="category">
        <yin:type name="category">
          <yin:typedef name="category">
            <yin:description>
              <yin:text>An enumeration of alarm category</yin:text>
            </yin:description>
            <yin:type name="enumeration">
              <yin:enum name="none"/>
              <yin:enum name="system"/>
              <yin:enum name="process"/>
              <yin:enum name="interface"/>
              <yin:enum name="platform"/>
              <yin:enum name="peer"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>The category to which the alarm belongs</yin:text>
        </yin:description>
        <yin:mandatory value="true"/>
      </yin:leaf>
      <yin:leaf name="severity">
        <yin:type name="severity">
          <yin:typedef name="severity">
            <yin:description>
              <yin:text>An enumeration of alarm severity levels</yin:text>
            </yin:description>
            <yin:type name="enumeration">
              <yin:enum name="info"/>
              <yin:enum name="minor"/>
              <yin:enum name="major"/>
              <yin:enum name="critical"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>The severity level of the alarm</yin:text>
        </yin:description>
        <yin:mandatory value="true"/>
      </yin:leaf>
      <yin:leaf name="message">
        <yin:type name="string"/>
        <yin:description>
          <yin:text>A description of what triggered the alarm</yin:text>
        </yin:description>
        <yin:mandatory value="true"/>
      </yin:leaf>
      <yin:leaf name="source">
        <yin:type name="string"/>
        <yin:description>
          <yin:text>The name of the entity which triggered the alarm (for
example, in the case of a network interface, it will be
the name of the interface)</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="process">
        <yin:type name="string"/>
        <yin:description>
          <yin:text>The name of the process which triggered the alarm</yin:text>
        </yin:description>
      </yin:leaf>
    </yin:list>
    <yin:list xmlns:conn="http://128technology.com/t128/state/connection-state" name="connectivity" module-prefix="conn">
      <yin:config value="false"/>
      <yin:description>
        <yin:text>List of inter-node connection statuses.</yin:text>
      </yin:description>
      <yin:key value="remote-router-name remote-node-name"/>
      <yin:leaf name="remote-node-name">
        <yin:type name="t128ext:name-id">
          <yin:typedef name="name-id">
            <yin:description>
              <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
            </yin:description>
            <yin:type name="string">
              <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                <yin:error-message>
                  <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                </yin:error-message>
              </yin:pattern>
              <yin:length value="0..63"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>Node name of the remote end of the connection.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="remote-router-name">
        <yin:type name="t128ext:name-id">
          <yin:typedef name="name-id">
            <yin:description>
              <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
            </yin:description>
            <yin:type name="string">
              <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                <yin:error-message>
                  <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                </yin:error-message>
              </yin:pattern>
              <yin:length value="0..63"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>Router name of the remote end of the connection.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="status">
        <yin:type name="t128ext:connection-status">
          <yin:typedef name="connection-status">
            <yin:description>
              <yin:text>Status of a connection between nodes</yin:text>
            </yin:description>
            <yin:type name="enumeration">
              <yin:enum name="connected">
                <yin:description>
                  <yin:text>The nodes are connected.</yin:text>
                </yin:description>
              </yin:enum>
              <yin:enum name="disconnected">
                <yin:description>
                  <yin:text>The nodes are not connected.</yin:text>
                </yin:description>
              </yin:enum>
              <yin:enum name="unmanaged">
                <yin:description>
                  <yin:text>A node not found in our configuration is connected.</yin:text>
                </yin:description>
              </yin:enum>
            </yin:type>
          </yin:typedef>
        </yin:type>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>The connection status.</yin:text>
        </yin:description>
      </yin:leaf>
    </yin:list>
    <yin:container xmlns:ps="http://128technology.com/t128/state/platform-state" name="platform" module-prefix="ps">
      <yin:config value="false"/>
      <yin:description>
        <yin:text>Platform and operating system specific information.</yin:text>
      </yin:description>
      <yin:presence value="Enable platform data"/>
      <yin:leaf name="memory">
        <yin:type name="string"/>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>The amount of installed system memory</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:container name="cpu">
        <yin:description>
          <yin:text>Platform data pertaining to the system's cpu</yin:text>
        </yin:description>
        <yin:leaf name="type">
          <yin:type name="string"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The type of cpu being used</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="speed">
          <yin:type name="decimal64">
            <yin:fraction-digits value="2"/>
            <yin:range value="0..100"/>
          </yin:type>
          <yin:units name="GHz"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The cpu speed</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="hyper-threading">
          <yin:type name="boolean"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The status of hyper-threading on the system</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="cores">
          <yin:type name="uint64"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The overall number of cpu cores on the system</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="fastlane-cores">
          <yin:type name="uint64"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The number of cores used by the fastlane</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:container>
      <yin:list name="device-interface">
        <yin:description>
          <yin:text>Platform data pertaining to the system's device
interfaces. This data is not a representation of the
system's configured device interfaces.</yin:text>
        </yin:description>
        <yin:key value="name"/>
        <yin:leaf name="name">
          <yin:type name="string"/>
          <yin:description>
            <yin:text>The name assigned to the device interface</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="manufacturer">
          <yin:type name="string"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The manufacturer of the device interface</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="description">
          <yin:type name="string"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The description of the device interface</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="driver">
          <yin:type name="string"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The device interface driver type</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="rss">
          <yin:type name="boolean"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The rss capability of the device interface</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="fastlane-eligible">
          <yin:type name="boolean"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>Whether the interface is eligible for the fastlane</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="speed">
          <yin:type name="string"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The capable speeds of the device interface</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="pci-address">
          <yin:type name="t128ext:pci-address">
            <yin:typedef name="pci-address">
              <yin:description>
                <yin:text>A PCI address specifying domain, bus, device, and function</yin:text>
              </yin:description>
              <yin:type name="string">
                <yin:pattern value="[0-9a-fA-F]{4}(:[0-9a-fA-F]{2}){2}\.[0-9]">
                  <yin:error-message>
                    <yin:value>Must contain only hex digits or any of the following: . :
Required format: 'aaaa:bb:cc.d' (e.g. 0000:00:1d.0).</yin:value>
                  </yin:error-message>
                </yin:pattern>
                <yin:length value="0..13"/>
              </yin:type>
            </yin:typedef>
          </yin:type>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The pci address of the device interface</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="mac-address">
          <yin:type name="yang:mac-address">
            <yin:typedef name="mac-address">
              <yin:type name="string">
                <yin:pattern value="[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}"/>
              </yin:type>
              <yin:description>
                <yin:text>The mac-address type represents an IEEE 802 MAC address.
The canonical representation uses lowercase characters.

In the value set and its semantics, this type is equivalent
to the MacAddress textual convention of the SMIv2.</yin:text>
              </yin:description>
              <yin:reference>
                <yin:text>IEEE 802: IEEE Standard for Local and Metropolitan Area
    Networks: Overview and Architecture
RFC 2579: Textual Conventions for SMIv2</yin:text>
              </yin:reference>
            </yin:typedef>
          </yin:type>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The mac address of the device interface</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:list>
      <yin:list name="disk">
        <yin:description>
          <yin:text>Platform data pertaining to the system's disk information</yin:text>
        </yin:description>
        <yin:key value="name"/>
        <yin:leaf name="name">
          <yin:type name="string"/>
          <yin:description>
            <yin:text>The name assigned to the disk</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="space">
          <yin:type name="uint64"/>
          <yin:units name="GB"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The size of the disk</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:list>
      <yin:container name="operating-system">
        <yin:description>
          <yin:text>Platform data pertaining to the system's operating system</yin:text>
        </yin:description>
        <yin:leaf name="name">
          <yin:type name="string"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The name of the operating system</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="version">
          <yin:type name="string"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The operating system version</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="kernel-version">
          <yin:type name="string"/>
          <yin:mandatory value="true"/>
          <yin:description>
            <yin:text>The kernel version</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:container>
    </yin:container>
    <yin:container xmlns:system="http://128technology.com/t128/state/system" name="state" module-prefix="system">
      <yin:config value="false"/>
      <yin:description>
        <yin:text>System state of a node.</yin:text>
      </yin:description>
      <yin:presence value="Enable state data"/>
      <yin:leaf name="operational-status">
        <yin:type name="enumeration">
          <yin:enum name="starting">
            <yin:description>
              <yin:text>Processes on the node are starting.</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="running">
            <yin:description>
              <yin:text>Processes on the node are running.</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="offline">
            <yin:description>
              <yin:text>Processes are not started on the node.</yin:text>
            </yin:description>
          </yin:enum>
        </yin:type>
        <yin:description>
          <yin:text>Describes the present state of a node.</yin:text>
        </yin:description>
        <yin:mandatory value="true"/>
      </yin:leaf>
      <yin:leaf name="software-version">
        <yin:type name="string"/>
        <yin:description>
          <yin:text>Software version of this node.</yin:text>
        </yin:description>
        <yin:mandatory value="true"/>
      </yin:leaf>
      <yin:leaf name="start-time">
        <yin:type name="yang:date-and-time">
          <yin:typedef name="date-and-time">
            <yin:type name="string">
              <yin:pattern value="\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})"/>
            </yin:type>
            <yin:description>
              <yin:text>The date-and-time type is a profile of the ISO 8601
standard for representation of dates and times using the
Gregorian calendar.  The profile is defined by the
date-time production in Section 5.6 of RFC 3339.

The date-and-time type is compatible with the dateTime XML
schema type with the following notable exceptions:

(a) The date-and-time type does not allow negative years.

(b) The date-and-time time-offset -00:00 indicates an unknown
time zone (see RFC 3339) while -00:00 and +00:00 and Z
all represent the same time zone in dateTime.

(c) The canonical format (see below) of data-and-time values
differs from the canonical format used by the dateTime XML
schema type, which requires all times to be in UTC using
the time-offset 'Z'.

This type is not equivalent to the DateAndTime textual
convention of the SMIv2 since RFC 3339 uses a different
separator between full-date and full-time and provides
higher resolution of time-secfrac.

The canonical format for date-and-time values with a known time
zone uses a numeric time zone offset that is calculated using
the device's configured known offset to UTC time.  A change of
the device's offset to UTC time will cause date-and-time values
to change accordingly.  Such changes might happen periodically
in case a server follows automatically daylight saving time
(DST) time zone offset changes.  The canonical format for
date-and-time values with an unknown time zone (usually
referring to the notion of local time) uses the time-offset
-00:00.</yin:text>
            </yin:description>
            <yin:reference>
              <yin:text>RFC 3339: Date and Time on the Internet: Timestamps
RFC 2579: Textual Conventions for SMIv2
XSD-TYPES: XML Schema Part 2: Datatypes Second Edition</yin:text>
            </yin:reference>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>Start time of the node. ISO 8601 formatted UTC timestamp.</yin:text>
        </yin:description>
        <yin:mandatory value="true"/>
      </yin:leaf>
      <yin:leaf name="role">
        <yin:type name="enumeration">
          <yin:enum name="control">
            <yin:description>
              <yin:text>A Control and Operations Resource node</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="slice">
            <yin:description>
              <yin:text>A Software Line-Card Engine node</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="combo">
            <yin:description>
              <yin:text>A combined Control and Slice</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="conductor">
            <yin:description>
              <yin:text>A remote management system</yin:text>
            </yin:description>
          </yin:enum>
          <yin:enum name="unconfigured">
            <yin:description>
              <yin:text>A node that is not present in configuration</yin:text>
            </yin:description>
          </yin:enum>
        </yin:type>
        <yin:description>
          <yin:text>The node's role in the 128T system.</yin:text>
        </yin:description>
        <yin:mandatory value="true"/>
      </yin:leaf>
      <yin:leaf name="alarm-count">
        <yin:type name="uint32"/>
        <yin:description>
          <yin:text>Number of active alarms on the node.</yin:text>
        </yin:description>
        <yin:mandatory value="true"/>
      </yin:leaf>
      <yin:list name="process">
        <yin:description>
          <yin:text>List of processes being executed on a node.</yin:text>
        </yin:description>
        <yin:key value="process-name"/>
        <yin:leaf name="process-name">
          <yin:type name="string"/>
          <yin:description>
            <yin:text>A unique name of the process.</yin:text>
          </yin:description>
        </yin:leaf>
        <yin:leaf name="status">
          <yin:type name="enumeration">
            <yin:enum name="starting">
              <yin:description>
                <yin:text>Process is starting.</yin:text>
              </yin:description>
            </yin:enum>
            <yin:enum name="running">
              <yin:description>
                <yin:text>Process is running.</yin:text>
              </yin:description>
            </yin:enum>
          </yin:type>
          <yin:description>
            <yin:text>Execution status of the process.</yin:text>
          </yin:description>
          <yin:mandatory value="true"/>
        </yin:leaf>
        <yin:leaf name="primary">
          <yin:type name="boolean"/>
          <yin:description>
            <yin:text>Primary (Leader) process in HA</yin:text>
          </yin:description>
        </yin:leaf>
      </yin:list>
    </yin:container>
    <yin:list xmlns:tunn="http://128technology.com/t128/state/tunnel-state" name="tunnel" module-prefix="tunn">
      <yin:config value="false"/>
      <yin:description>
        <yin:text>List of inter-node secure communication tunnel statuses.</yin:text>
      </yin:description>
      <yin:key value="local-forwarding-ip port"/>
      <yin:leaf name="local-forwarding-ip">
        <yin:type name="inet:ip-address">
          <yin:typedef name="ip-address">
            <yin:type name="union">
              <yin:type name="inet:ipv4-address">
                <yin:typedef name="ipv4-address">
                  <yin:type name="string">
                    <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                  </yin:type>
                  <yin:description>
                    <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                  </yin:description>
                </yin:typedef>
              </yin:type>
              <yin:type name="inet:ipv6-address">
                <yin:typedef name="ipv6-address">
                  <yin:type name="string">
                    <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                    <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                  </yin:type>
                  <yin:description>
                    <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                  </yin:description>
                  <yin:reference>
                    <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                  </yin:reference>
                </yin:typedef>
              </yin:type>
            </yin:type>
            <yin:description>
              <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
            </yin:description>
            <yin:reference>
              <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
            </yin:reference>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>The local ssh listen address the clients connect to.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="port">
        <yin:type name="t128ext:l4-port">
          <yin:typedef name="l4-port">
            <yin:description>
              <yin:text>Transport (layer 4) port number</yin:text>
            </yin:description>
            <yin:type name="uint16"/>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>The local ssh listen port the clients connect to.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="remote-node-name">
        <yin:type name="t128ext:name-id">
          <yin:typedef name="name-id">
            <yin:description>
              <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
            </yin:description>
            <yin:type name="string">
              <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                <yin:error-message>
                  <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                </yin:error-message>
              </yin:pattern>
              <yin:length value="0..63"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>Node name of the remote end of the secure communication tunnel.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="remote-router-name">
        <yin:type name="t128ext:name-id">
          <yin:typedef name="name-id">
            <yin:description>
              <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
            </yin:description>
            <yin:type name="string">
              <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                <yin:error-message>
                  <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                </yin:error-message>
              </yin:pattern>
              <yin:length value="0..63"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>Router name of the remote end of the secure communication tunnel.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="service-name">
        <yin:type name="string"/>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>The name system service using this secure tunnel.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="status">
        <yin:type name="t128ext:connection-status">
          <yin:typedef name="connection-status">
            <yin:description>
              <yin:text>Status of a connection between nodes</yin:text>
            </yin:description>
            <yin:type name="enumeration">
              <yin:enum name="connected">
                <yin:description>
                  <yin:text>The nodes are connected.</yin:text>
                </yin:description>
              </yin:enum>
              <yin:enum name="disconnected">
                <yin:description>
                  <yin:text>The nodes are not connected.</yin:text>
                </yin:description>
              </yin:enum>
              <yin:enum name="unmanaged">
                <yin:description>
                  <yin:text>A node not found in our configuration is connected.</yin:text>
                </yin:description>
              </yin:enum>
            </yin:type>
          </yin:typedef>
        </yin:type>
        <yin:mandatory value="true"/>
        <yin:description>
          <yin:text>The secure communication tunnel status.</yin:text>
        </yin:description>
      </yin:leaf>
    </yin:list>
  </yin:list>
  <yin:list xmlns:sys="http://128technology.com/t128/config/system-config" name="redundancy-group" module-prefix="sys">
    <yin:key value="name"/>
    <yin:description>
      <yin:text>A group of redundant interfaces which will fail over together
if one goes down for any reason.</yin:text>
    </yin:description>
    <t128-codegen:base-object/>
    <yin:leaf name="name">
      <yin:type name="t128ext:name-id">
        <yin:typedef name="name-id">
          <yin:description>
            <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
          </yin:description>
          <yin:type name="string">
            <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
              <yin:error-message>
                <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
              </yin:error-message>
            </yin:pattern>
            <yin:length value="0..63"/>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <t128ext:help>key identifier</t128ext:help>
      <yin:description>
        <yin:text>An arbitrary, unique name for this group.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="description">
      <yin:type name="string"/>
      <yin:description>
        <yin:text>A description of the redundancy-group.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:list name="member">
      <yin:key value="node device-id"/>
      <yin:must condition="count(../member[node != current()/node]) = 0">
        <yin:error-message>
          <yin:value>All interfaces in a redundancy-group must be on the same node</yin:value>
        </yin:error-message>
      </yin:must>
      <yin:must condition="count(../../redundancy-group/member[node = current()/node and device-id = current()/device-id]) = 1">
        <yin:error-message>
          <yin:value>Redundant interface can only be assigned to one redundancy group.</yin:value>
        </yin:error-message>
      </yin:must>
      <yin:leaf name="node">
        <yin:type name="leafref">
          <yin:path value="../../../sys:node/sys:name"/>
          <yin:type name="t128ext:name-id">
            <yin:typedef name="name-id">
              <yin:description>
                <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
              </yin:description>
              <yin:type name="string">
                <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                  <yin:error-message>
                    <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                  </yin:error-message>
                </yin:pattern>
                <yin:length value="0..63"/>
              </yin:type>
            </yin:typedef>
          </yin:type>
        </yin:type>
        <yin:description>
          <yin:text>Name of the node the interface is on.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="device-id">
        <yin:type name="leafref">
          <yin:path value="../../../sys:node/sys:device-interface/sys:id"/>
          <yin:type name="t128ext:device-port">
            <yin:typedef name="device-port">
              <yin:description>
                <yin:text>A physical or virtual port number of a network interface</yin:text>
              </yin:description>
              <yin:type name="uint16"/>
            </yin:typedef>
          </yin:type>
        </yin:type>
        <yin:description>
          <yin:text>Device interface ID.</yin:text>
        </yin:description>
        <yin:must condition="/t128:config/authy:authority/authy:router/sys:node&#10;/sys:device-interface[sys:id = current()]/sys:shared-phys-address">
          <yin:error-message>
            <yin:value>All interfaces in a redundancy-group must have a
shared physical address configured.</yin:value>
          </yin:error-message>
        </yin:must>
      </yin:leaf>
    </yin:list>
    <yin:leaf name="priority">
      <yin:type name="uint8">
        <yin:range value="0..100"/>
      </yin:type>
      <yin:mandatory value="true"/>
      <yin:description>
        <yin:text>Priority of member interfaces relative to their redundant
interfaces.  Higher priority interfaces take precedence.</yin:text>
      </yin:description>
    </yin:leaf>
  </yin:list>
  <yin:list xmlns:sys="http://128technology.com/t128/config/system-config" name="priority" module-prefix="sys">
    <yin:status value="obsolete"/>
    <yin:key value="id"/>
    <yin:max-elements value="3"/>
    <t128-codegen:base-object/>
    <yin:leaf name="id">
      <yin:type name="t128ext:priority-id">
        <yin:typedef name="priority-id">
          <yin:type name="uint8">
            <yin:range value="0..3"/>
          </yin:type>
        </yin:typedef>
      </yin:type>
    </yin:leaf>
    <yin:leaf name="relative-bandwidth">
      <yin:type name="t128ext:percentage">
        <yin:typedef name="percentage">
          <yin:type name="uint8">
            <yin:range value="0..100"/>
          </yin:type>
          <yin:description>
            <yin:text>Integer indicating a percentage value</yin:text>
          </yin:description>
        </yin:typedef>
      </yin:type>
      <yin:units name="percent"/>
      <yin:default value="100"/>
      <yin:description>
        <yin:text>The relative amount of bandwidth queues with this priority
will be scheduled to transmit versus other priorities.</yin:text>
      </yin:description>
    </yin:leaf>
  </yin:list>
  <yin:list xmlns:if="http://128technology.com/t128/config/interface-config" 
    xmlns:svc="http://128technology.com/t128/config/service-config" 
    xmlns:sys="http://128technology.com/t128/config/system-config" name="service-route" module-prefix="svc">
    <yin:key value="name"/>
    <yin:description>
      <yin:text>Defines a route for a service or an instance of a service
(server or service agent).</yin:text>
    </yin:description>
    <t128-codegen:base-object/>
    <yin:must condition="(count(next-hop) &gt; 0 or&#10; count(peer) &gt; 0 or&#10; count(destination) &gt; 0) and&#10;(count(peer) = 0 or count(destination) = 0)">
      <yin:error-message>
        <yin:value>A service route must have at least one next-hop,
or peer, or destination configured. It cannot
have both the peer and destination configured.</yin:value>
      </yin:error-message>
    </yin:must>
    <yin:leaf name="name">
      <yin:type name="t128ext:name-id">
        <yin:typedef name="name-id">
          <yin:description>
            <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
          </yin:description>
          <yin:type name="string">
            <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
              <yin:error-message>
                <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
              </yin:error-message>
            </yin:pattern>
            <yin:length value="0..63"/>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <t128ext:help>key identifier</t128ext:help>
      <yin:description>
        <yin:text>An arbitrary, unique name for the service route.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="service-name">
      <yin:type name="svc:service-name-ref">
        <yin:typedef name="service-name-ref">
          <yin:type name="leafref">
            <yin:path value="/t128:config/authy:authority/svc:service/svc:name"/>
            <yin:type name="t128ext:name-id">
              <yin:typedef name="name-id">
                <yin:description>
                  <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
                </yin:description>
                <yin:type name="string">
                  <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                    <yin:error-message>
                      <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                    </yin:error-message>
                  </yin:pattern>
                  <yin:length value="0..63"/>
                </yin:type>
              </yin:typedef>
            </yin:type>
          </yin:type>
          <yin:description>
            <yin:text>This type is used by other entities that need to reference
configured services.</yin:text>
          </yin:description>
        </yin:typedef>
        <yin:type name="t128ext:name-id">
          <yin:typedef name="name-id">
            <yin:description>
              <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
            </yin:description>
            <yin:type name="string">
              <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                <yin:error-message>
                  <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                </yin:error-message>
              </yin:pattern>
              <yin:length value="0..63"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
      </yin:type>
      <yin:mandatory value="true"/>
      <yin:description>
        <yin:text>The name of the service that this service route applies to.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="destination">
      <yin:type name="inet:ip-address">
        <yin:typedef name="ip-address">
          <yin:type name="union">
            <yin:type name="inet:ipv4-address">
              <yin:typedef name="ipv4-address">
                <yin:type name="string">
                  <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                </yin:type>
                <yin:description>
                  <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                </yin:description>
              </yin:typedef>
            </yin:type>
            <yin:type name="inet:ipv6-address">
              <yin:typedef name="ipv6-address">
                <yin:type name="string">
                  <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                  <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                </yin:type>
                <yin:description>
                  <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                </yin:description>
                <yin:reference>
                  <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                </yin:reference>
              </yin:typedef>
            </yin:type>
          </yin:type>
          <yin:description>
            <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
          </yin:description>
          <yin:reference>
            <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
          </yin:reference>
        </yin:typedef>
      </yin:type>
      <yin:mandatory value="false"/>
      <yin:description>
        <yin:text>The address the destination is natted to. When the destination is
present, this is the address of the server (service agent) for the
service.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="peer">
      <yin:type name="leafref">
        <yin:path value="../../authy:peer/authy:name"/>
        <yin:type name="t128ext:peer-name">
          <yin:typedef name="peer-name">
            <yin:description>
              <yin:text>A string identifier for a peer, which uses alphanumerics, underscores,
dots, or dashes, and cannot exceed 253 characters.</yin:text>
            </yin:description>
            <yin:type name="string">
              <yin:pattern value="((([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9])?">
                <yin:error-message>
                  <yin:value>Must contain only alphanumeric characters or any of the following: - _ .
(e.g., MyFirst-128T-Router).</yin:value>
                </yin:error-message>
              </yin:pattern>
              <yin:length value="0..253"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
      </yin:type>
      <t128ext:help>Peer router name</t128ext:help>
      <yin:description>
        <yin:text>Peer router to forward packets to for the service.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="remote-tenant-id">
      <yin:status value="obsolete"/>
      <yin:type name="t128ext:tenant-id">
        <yin:typedef name="tenant-id">
          <yin:description>
            <yin:text>A numeric identifier for a tenant in the 128T system</yin:text>
          </yin:description>
          <yin:type name="uint32"/>
        </yin:typedef>
      </yin:type>
      <yin:default value="4294967295"/>
      <yin:description>
        <yin:text>When the service is learned from another authority through STEP, this is
the tenant id from the remote authority. It is included in metadata when
forwarding to the authority that owns the service.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="service-route-policy">
      <yin:type name="leafref">
        <yin:path value="../../svc:service-route-policy/svc:name"/>
        <yin:type name="t128ext:name-id">
          <yin:typedef name="name-id">
            <yin:description>
              <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
            </yin:description>
            <yin:type name="string">
              <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                <yin:error-message>
                  <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                </yin:error-message>
              </yin:pattern>
              <yin:length value="0..63"/>
            </yin:type>
          </yin:typedef>
        </yin:type>
      </yin:type>
      <yin:description>
        <yin:text>Service Route Policy that applies to the service route.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:list name="next-hop">
      <yin:when condition="count(../peer) = 0"/>
      <yin:key value="node-name interface"/>
      <yin:description>
        <yin:text>An instance of the nexthop for the service route.</yin:text>
      </yin:description>
      <t128-codegen:setters/>
      <yin:leaf name="node-name">
        <yin:type name="leafref">
          <yin:path value="../../../sys:node/sys:name"/>
          <yin:type name="t128ext:name-id">
            <yin:typedef name="name-id">
              <yin:description>
                <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
              </yin:description>
              <yin:type name="string">
                <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                  <yin:error-message>
                    <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                  </yin:error-message>
                </yin:pattern>
                <yin:length value="0..63"/>
              </yin:type>
            </yin:typedef>
          </yin:type>
        </yin:type>
        <yin:description>
          <yin:text>The name of the node on which the interface resides.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="interface">
        <yin:type name="leafref">
          <yin:path value="../../../sys:node/sys:device-interface/if:network-interface/if:name"/>
          <yin:type name="t128ext:name-id">
            <yin:typedef name="name-id">
              <yin:description>
                <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
              </yin:description>
              <yin:type name="string">
                <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
                  <yin:error-message>
                    <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
                  </yin:error-message>
                </yin:pattern>
                <yin:length value="0..63"/>
              </yin:type>
            </yin:typedef>
          </yin:type>
        </yin:type>
        <yin:description>
          <yin:text>A reference to the name of a configured network layer
interface used to reach the destination.</yin:text>
        </yin:description>
      </yin:leaf>
      <yin:leaf name="gateway-ip">
        <yin:type name="inet:ip-address">
          <yin:typedef name="ip-address">
            <yin:type name="union">
              <yin:type name="inet:ipv4-address">
                <yin:typedef name="ipv4-address">
                  <yin:type name="string">
                    <yin:pattern value="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"/>
                  </yin:type>
                  <yin:description>
                    <yin:text>The ipv4-address type represents an IPv4 address in
dotted-quad notation.  The IPv4 address may include a zone
index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format for the zone index is the numerical
format</yin:text>
                  </yin:description>
                </yin:typedef>
              </yin:type>
              <yin:type name="inet:ipv6-address">
                <yin:typedef name="ipv6-address">
                  <yin:type name="string">
                    <yin:pattern value="((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?"/>
                    <yin:pattern value="(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"/>
                  </yin:type>
                  <yin:description>
                    <yin:text>The ipv6-address type represents an IPv6 address in full,
mixed, shortened, and shortened-mixed notation.  The IPv6
address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index number or the name of an
interface.  If the zone index is not present, the default
zone of the device will be used.

The canonical format of IPv6 addresses uses the textual
representation defined in Section 4 of RFC 5952.  The
canonical format for the zone index is the numerical
format as described in Section 11.2 of RFC 4007.</yin:text>
                  </yin:description>
                  <yin:reference>
                    <yin:text>RFC 4291: IP Version 6 Addressing Architecture
RFC 4007: IPv6 Scoped Address Architecture
RFC 5952: A Recommendation for IPv6 Address Text
    Representation</yin:text>
                  </yin:reference>
                </yin:typedef>
              </yin:type>
            </yin:type>
            <yin:description>
              <yin:text>The ip-address type represents an IP address and is IP
version neutral.  The format of the textual representation
implies the IP version.  This type supports scoped addresses
by allowing zone identifiers in the address format.</yin:text>
            </yin:description>
            <yin:reference>
              <yin:text>RFC 4007: IPv6 Scoped Address Architecture</yin:text>
            </yin:reference>
          </yin:typedef>
        </yin:type>
        <yin:description>
          <yin:text>Gateway ip address of the service route nexthop.</yin:text>
        </yin:description>
      </yin:leaf>
    </yin:list>
  </yin:list>
  <yin:list xmlns:if="http://128technology.com/t128/config/interface-config" 
    xmlns:svc="http://128technology.com/t128/config/service-config" 
    xmlns:sys="http://128technology.com/t128/config/system-config" name="service-route-policy" module-prefix="svc">
    <yin:key value="name"/>
    <yin:description>
      <yin:text>A service route policy</yin:text>
    </yin:description>
    <t128-codegen:base-object/>
    <yin:leaf name="name">
      <yin:type name="t128ext:name-id">
        <yin:typedef name="name-id">
          <yin:description>
            <yin:text>A string identifier which only uses alphanumerics, underscores,
or dashes, and cannot exceed 63 characters.</yin:text>
          </yin:description>
          <yin:type name="string">
            <yin:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]">
              <yin:error-message>
                <yin:value>Must contain only alphanumeric characters or any of the following: _ -</yin:value>
              </yin:error-message>
            </yin:pattern>
            <yin:length value="0..63"/>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <t128ext:help>key identifier</t128ext:help>
      <yin:description>
        <yin:text>An arbitrary, unique name for the service route policy.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="description">
      <yin:type name="string"/>
      <yin:description>
        <yin:text>A description of the service route policy.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="session-rate">
      <yin:type name="t128ext:limit">
        <yin:typedef name="limit">
          <yin:type name="union">
            <yin:type name="uint64">
              <yin:range value="0..999999999999"/>
            </yin:type>
            <yin:type name="enumeration">
              <yin:enum name="unlimited">
                <yin:description>
                  <yin:text>No limit on this value</yin:text>
                </yin:description>
              </yin:enum>
            </yin:type>
          </yin:type>
          <yin:default value="unlimited"/>
          <t128-codegen:type>string</t128-codegen:type>
          <yin:description>
            <yin:text>A type for defining values such as rates and capacities for which the
default value is unlimited</yin:text>
          </yin:description>
        </yin:typedef>
      </yin:type>
      <yin:description>
        <yin:text>Maximum rate in sessions per second.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="max-sessions">
      <yin:type name="t128ext:limit">
        <yin:typedef name="limit">
          <yin:type name="union">
            <yin:type name="uint64">
              <yin:range value="0..999999999999"/>
            </yin:type>
            <yin:type name="enumeration">
              <yin:enum name="unlimited">
                <yin:description>
                  <yin:text>No limit on this value</yin:text>
                </yin:description>
              </yin:enum>
            </yin:type>
          </yin:type>
          <yin:default value="unlimited"/>
          <t128-codegen:type>string</t128-codegen:type>
          <yin:description>
            <yin:text>A type for defining values such as rates and capacities for which the
default value is unlimited</yin:text>
          </yin:description>
        </yin:typedef>
      </yin:type>
      <yin:description>
        <yin:text>Maximum number of active sessions.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="session-high-water-mark">
      <yin:type name="t128ext:percentage">
        <yin:typedef name="percentage">
          <yin:type name="uint8">
            <yin:range value="0..100"/>
          </yin:type>
          <yin:description>
            <yin:text>Integer indicating a percentage value</yin:text>
          </yin:description>
        </yin:typedef>
      </yin:type>
      <yin:units name="percent"/>
      <yin:description>
        <yin:text>Percentage of maximum sessions above which the route will
no longer be considered for load balancing.</yin:text>
      </yin:description>
      <yin:default value="95"/>
    </yin:leaf>
    <yin:leaf name="session-low-water-mark">
      <yin:type name="t128ext:percentage">
        <yin:typedef name="percentage">
          <yin:type name="uint8">
            <yin:range value="0..100"/>
          </yin:type>
          <yin:description>
            <yin:text>Integer indicating a percentage value</yin:text>
          </yin:description>
        </yin:typedef>
      </yin:type>
      <yin:units name="percent"/>
      <yin:description>
        <yin:text>Percentage of maximum sessions below which the route will
be reconsidered for load balancing.</yin:text>
      </yin:description>
      <yin:default value="90"/>
    </yin:leaf>
  </yin:list>
  <yin:list xmlns:al="http://128technology.com/t128/analytics" name="entitlement" module-prefix="al">
    <yin:config value="false"/>
    <yin:key value="period-start"/>
    <yin:leaf name="period-start">
      <yin:type name="t128ext:date">
        <yin:typedef name="date">
          <yin:description>
            <yin:text>A calendar date in ISO 8601 format (YYYY-MM-DD).</yin:text>
          </yin:description>
          <yin:type name="string">
            <yin:pattern value="\d{4}-\d{2}-\d{2}">
              <yin:error-message>
                <yin:value>Must be an ISO-8601 date in the format YYYY-MM-DD</yin:value>
              </yin:error-message>
            </yin:pattern>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <t128ext:help>Period start</t128ext:help>
      <yin:description>
        <yin:text>Entitlement period start date.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="period-end">
      <yin:mandatory value="true"/>
      <yin:type name="t128ext:date">
        <yin:typedef name="date">
          <yin:description>
            <yin:text>A calendar date in ISO 8601 format (YYYY-MM-DD).</yin:text>
          </yin:description>
          <yin:type name="string">
            <yin:pattern value="\d{4}-\d{2}-\d{2}">
              <yin:error-message>
                <yin:value>Must be an ISO-8601 date in the format YYYY-MM-DD</yin:value>
              </yin:error-message>
            </yin:pattern>
          </yin:type>
        </yin:typedef>
      </yin:type>
      <t128ext:help>Period end</t128ext:help>
      <yin:description>
        <yin:text>Entitlement period end date.</yin:text>
      </yin:description>
    </yin:leaf>
    <yin:leaf name="percentile">
      <yin:mandatory value="true"/>
      <yin:type name="uint64"/>
      <yin:units name="bps"/>
      <t128ext:help>95th percentile bandwidth</t128ext:help>
      <yin:description>
        <yin:text>95th percentile bandwidth consumed for a given month.</yin:text>
      </yin:description>
    </yin:leaf>
  </yin:list>
</yin:list>
